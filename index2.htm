<!DOCTYPE html>
<html>
<head>
<title>Title of the document</title>
<script src="https://code.jquery.com/jquery-2.1.3.min.js"></script>
<script src="scrollTo/jquery.scrollTo.min.js"></script>
<script src="alertify/js/alertify.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.3.0/knockout-min.js"></script>
<script src="knockout.mapping-latest.js"></script>
<script src="lz-string.min.js"></script>


<link href="alertify/css/core.css" rel="stylesheet" type="text/css"></link>
<link href="alertify/css/themes/default/default.css" rel="stylesheet" type="text/css"></link>

<script>

ko.observableIncremental = function(val, min, max) {
	var observable = ko.observable(val);
	observable.raise = function() { if (max == undefined || observable() < max) observable(observable() + 1); };
	observable.lower = function() { if (min == undefined || observable() > min) observable(observable() - 1); };
	return observable;
};

ko.computedResetable = function(maxComputed, min, max) {
	var limit = ko.computed(maxComputed);
	var used = ko.observableIncremental(0, min, max);
	var computed = ko.computed(function() { return limit() - used() }, 0);
	computed.used = used;
	computed.limit = limit;
	return computed;
};

function SkillArray(data) {
	var self = this;
	self.pistols = data.pistols || 0;
	self.automatics = data.automatics || 0;
	self.longArms = data.longArms || 0;
	self.blades = data.blades || 0;
	self.unarmed = data.unarmed || 0;
	self.counterSpelling = data.counterSpelling || 0;
	self.spellcasting = data.spellcasting || 0;
}

var FireModeEnum = function(name, bulletsUsed, defenseMod, causesProgressiveRecoil) {
	var self = this;
	self.name = name;
	self.bulletsUsed = bulletsUsed;
	self.defenseMod = defenseMod;
	self.causesProgressiveRecoil = causesProgressiveRecoil;
}

var FireMode = {
	SS: new FireModeEnum("SS", 1, 0, false),
	SA: new FireModeEnum("SA", 1, 0, false),
	SB: new FireModeEnum("SB", 3, -2, true),
	BF: new FireModeEnum("BF", 3, -2, false),
	FA: new FireModeEnum("FA", 10, -9, true),
	asArray: function() {
		var arr = [];
		for (var x in this) {
			if (typeof this[x] == "object") {
				arr.push(this[x]);
			}
		}
		return arr;
	}
}

var StatusEnum = function(key, attackMod, defenseMod) {
	var self = this;
	self.key = key;
	self.attackMod = attackMod;
	self.defenseMod = defenseMod;
};

var Status = {
	BlindFire: new StatusEnum("BlindFire", -6, 0),
	BlindFireWithImaging: new StatusEnum("BlindFireWithImaging", -3, 0),
	CalledShot: new StatusEnum("CalledShot", -4, 0),
	Charging: new StatusEnum("Charging", 2, 0),
	FriendsInMelee: new StatusEnum("FriendsInMelee", 1, 0),
	GoodCover: new StatusEnum("GoodCover", 0, 4),
	ImplantedSmartGun: new StatusEnum("ImplantedSmartGun", 2, 0),
	InMelee: new StatusEnum("InMelee", -3, -3),
	InMovingVehicle: new StatusEnum("InMovingVehicle", 0, 3),
	LaserSight: new StatusEnum("LaserSight", 1, 0),
	PartialCover: new StatusEnum("PartialCover", 0, 2),
	Prone: new StatusEnum("Prone", -1, -2),
	ReceivingCharge: new StatusEnum("ReceivingCharge", 0, 1),
	Running: new StatusEnum("Running", -2, 2),
	SmartGun: new StatusEnum("SmartGun", 1, 0),
	SuperiorPosition: new StatusEnum("SuperiorPosition", 2, 0),
	TouchOnly: new StatusEnum("TouchOnly", 2, 0),
	attackModifiers: function() {
		var arr = [];
		for (var x in this) {
			if (typeof this[x] == "object") {
				if (this[x].attackMod != 0) {
					arr.push(this[x]);
				}
			}
		}
		return arr;
	},
	defenseModifiers: function() {
		var arr = [];
		for (var x in this) {
			if (typeof this[x] == "object") {
				if (this[x].defenseMod != 0) {
					arr.push(this[x]);
				}
			}
		}
		return arr;
	},
};

function Initiative(reaction, intuition, bonusDice, dataProcessing, conditionModifier) {
	var self = this;
	self.bonusDice = ko.observable(bonusDice);
	self.modes = { 'AR': Math.min(1 + self.bonusDice(), 5), 'ColdSim VR': 3, 'HotSim VR': 4 };
	self.mode = ko.observable('AR');
	self.arModifier = ko.computed(function() { return reaction() + intuition() });
	self.vrModifier = ko.computed(function() { return dataProcessing() + intuition() });
	self.modifier = ko.computed(function() { return self.mode() == 'AR' ? self.arModifier() : self.vrModifier() });
	self.otherModes = ko.computed(function() {
		var otherModes = [];
		for (var i in self.modes) {
			if (i != self.mode())
				otherModes.push(i);
		}
		return otherModes;
	});
	self.dice = ko.computed(function() {
		return self.modes[self.mode()];
	});
	self.rolledScore = ko.observable(0);
	self.score = ko.computed(function() { return self.modifier() + self.rolledScore() + conditionModifier(); });
	self.label = ko.computed(function() { return self.score() + ' (' + self.modifier() + '+' + self.dice() + 'd6)' });
	self.roll = function() {
		var score = rollSum(self.dice());
		self.rolledScore(score);
	};
	self.hotSimModifier = ko.computed(function() {
		return self.mode() == 'HotSim VR'  ? 2 : 0;
	});
	self.changeScore = function(score) {
		self.rolledScore(self.rolledScore() + score);
	};
	self.changeMode = function(mode) {
		var diceDiff = self.modes[mode] - self.dice();
		if (diceDiff != 0) {
			var dice = Math.abs(diceDiff);

			var scoreChange = rollSum(dice);
			if (diceDiff < 0)
				scoreChange = -scoreChange;
			self.changeScore(scoreChange);
		}
		self.mode(mode);
	};
}

function AddPc(name, reaction, intuition, bonusInitiativeDice, dataProcessing, firewall) {
	var pc = new Npc(name, new NpcAttributes(0, 0, reaction, 0, 0, 0, intuition, 0, 0, 0, 0), 0, {}, [], bonusInitiativeDice, dataProcessing, firewall, []);
	pc.isPC = true
	return pc;
}

function NpcAttributes(body, agility, reaction, strength, willpower, logic, intuition, charisma, edge, magic, essence) {
	var self = this;
	self.body = body;
	self.agility = agility;
	self.reaction = reaction;
	self.strength = strength;
	self.willpower = willpower;
	self.logic = logic;
	self.intuition = intuition;
	self.charisma = charisma;
	self.edge = edge;
	self.magic = magic;
	self.essence = essence;
}

function Npc(name, attributes, armor, skills, guns, bonusInitiativeDice, dataProcessing, firewall, meleeWeapons) {
	console.log('Creating npc ' + name);
	var self = this;
	self.activeStatusMenu = ko.observable("hide");
	self.name = name;
	self.attributes = attributes;
	self.body = ko.observable(attributes.body);
	self.agility = ko.observable(attributes.agility);
	self.reaction = ko.observable(attributes.reaction);
	self.strength = ko.observable(attributes.strength);
	self.willpower = ko.observable(attributes.willpower);
	self.logic = ko.observable(attributes.logic);
	self.intuition = ko.observable(attributes.intuition);
	self.charisma = ko.observable(attributes.charisma);
	self.edge = ko.observable(attributes.edge);
	self.magic = ko.observable(attributes.magic);
	self.essence = ko.observable(attributes.essence);
	self.dataProcessing = ko.observableIncremental(dataProcessing);
	self.firewall = ko.observableIncremental(firewall);
	self.armor = armor;
	self.recoilCompensation = ko.computed(function() { return Math.ceil(self.strength() / 3) + 1; });
	self.skills = new SkillArray(skills);
	self.statuses = ko.observableArray([]);
	self.isActive = ko.observable(false);
	self.hasActed = ko.observable(false);
	self.isPC = false;
	self.edging = ko.observable(false);
	self.edgePoints = ko.observable(self.edge());
	self.useEdge = function() {
		if (!self.edging() || self.edgePoints() == 0) return 0;
		self.edgePoints(self.edgePoints() - 1);
		if (self.edgePoints() == 0) self.edging(false);
		return self.edge();
	};
	self.counterSpellPool = ko.computedResetable(function() { return self.skills.counterSpelling; }, 0);
	self.sustains = ko.observableIncremental(0);
	self.globalModifier = ko.computed(function() {
		var mod = self.sustains() * -2;
		mod += self.edgePoints() > 0 && self.edging() ? self.edge() : 0;
		return mod;
	});
	self.newCombatTurn = function() {
		self.counterSpellPool.used(0);
	};

	var sumModifiers = function(prop) {
		var sum = 0;
		for (var i = 0; i < self.statuses().length; i++) {
			for (var x = 0; x < arguments.length; x++) {
				if (self.statuses()[i] == arguments[x]) {
					sum += self.statuses()[i][prop];
				}
			}
		}
		return sum;
	};

	var ConditionTrack = function(attribute) {
		var self2 = this;
		self2.damage = ko.observable(0);
		self2.monitor = ko.computed(function() { return Math.ceil(attribute / 2) + 8; });
		self2.current = ko.computed(function() { return self2.monitor() - self2.damage(); });
		self2.takeDamage = function() { if (self2.damage() < self2.monitor()) self2.damage(self2.damage() + 1); };
		self2.healDamage = function() { if (self2.damage() > 0) self2.damage(self2.damage() - 1); };
		self2.label = ko.computed(function() {
			return 'Condition Monitor ' + self2.current() + '(' + self2.monitor() + ')';
		});
	};

	self.physicalTrack = new ConditionTrack(self.body());
	self.useStun = ko.observable(false);
	self.stunTrack = new ConditionTrack(self.willpower());

	self.conditionModifier = ko.computed(function() {
		var fromDamage = Math.floor(self.physicalTrack.damage() / 3);
		var fromStun = Math.floor(self.stunTrack.damage() / 3);
		if (!self.useStun()) fromStun = 0;
		return -(fromDamage + fromStun);
	});

	self.initiative = new Initiative(self.reaction, self.intuition, bonusInitiativeDice, self.dataProcessing, self.conditionModifier);

	self.miscDefenseMod = ko.observable(0);
	self.lowerDefense = function() { self.miscDefenseMod(self.miscDefenseMod() - 1); };
	self.raiseDefense = function() { self.miscDefenseMod(self.miscDefenseMod() + 1); };
	self.previouslyDefendedAttacks = ko.observable(0);
	self.defense = ko.computed(function() { 
		return self.reaction() + self.intuition() + self.globalModifier() + self.miscDefenseMod() + self.conditionModifier() - self.previouslyDefendedAttacks(); 
	});
	self.startTurn = function() {
		self.isActive(true);
		self.previouslyDefendedAttacks(0);
	};
	self.endTurn = function() {
		self.isActive(false);
		self.hasActed(true);
	};
	self.gunDefense = ko.computed(function() {
		return self.defense() + 
			sumModifiers("defenseMod",
				Status.InMovingVehicle,
				Status.Prone,
				Status.Running,
				Status.GoodCover,
				Status.PartialCover,
				Status.InMelee);
	});
	self.meleeDefense = ko.computed(function() {
		return self.defense() + 
			sumModifiers("defenseMod",
				Status.InMovingVehicle,
				Status.ReceivingCharge,
				Status.GoodCover,
				Status.PartialCover);
	});
	self.spellcasting = ko.computed(function() {
		return self.skills.spellcasting + self.magic() + self.globalModifier() + self.conditionModifier();
	});

	var DefenseFireMode = function(mode) {
		var self2 = this;
		self2.mode = mode;
		self2.modifier = ko.computed(function() {
			return self.gunDefense() + self2.mode.defenseMod;
		});
		self2.label = ko.computed(function() {
			return self2.mode.name + ' ' + self2.modifier() + '(' + self2.mode.defenseMod + ')';
		});
	};
	self.defenseFireModes = [];
	var fireModes = FireMode.asArray();
	for (var i in fireModes) {
		self.defenseFireModes.push(new DefenseFireMode(fireModes[i]));
	}

	self.resistanceMiscModifier = ko.observable(0);
	self.resistance = ko.computed(function() { return self.armor + self.body() + self.resistanceMiscModifier() + self.globalModifier() });
	self.lowerResistance = function() { self.resistanceMiscModifier(self.resistanceMiscModifier() - 1); };
	self.raiseResistance = function() { self.resistanceMiscModifier(self.resistanceMiscModifier() + 1); };

	self.progressiveRecoil = ko.observable(0);
	self.resetRecoil = function() {
		self.progressiveRecoil(0);
	};

	self.statusModifier = function(status, modifier) {
		for (var i = 0; i < self.statuses().length; i++) {
			if (self.statuses()[i] == status)
				return modifier ? modifier : status.value;
		}
	};

	self.rangedAttackStatusModifier = ko.computed(function() {
		return sumModifiers("attackMod",
			Status.BlindFire,
			Status.BlindFireWithImaging,
			Status.InMelee,
			Status.Running,
			Status.CalledShot,
			Status.SmartGun,
			Status.ImplantedSmartGun,
			Status.LaserSight);
	});

	self.meleeAttackModifiers = ko.computed(function() {
		return sumModifiers("attackMod",
			Status.Charging,
			Status.Prone,
			Status.CalledShot,
			Status.SuperiorPosition,
			Status.FriendsInMelee,
			Status.TouchOnly);
	});

	self.toggleDefenseModifier = function(modifier) {
		if (self.statuses.indexOf(modifier) != -1) {
			self.statuses.remove(modifier);
			return false;
		}
		self.statuses.push(modifier);
		return true;
	};

	self.shoot = function(gun, fireMode) {
		var dicePool = fireMode.modifier();
		if (fireMode.mode.causesProgressiveRecoil) {
			self.progressiveRecoil(self.progressiveRecoil() + fireMode.mode.bulletsUsed);
		}

		gun.usedAmmo(gun.usedAmmo() + fireMode.mode.bulletsUsed);

		return dicePool;
	};

	self.gunDefend = function(fireMode) {
		var dicePool = fireMode.modifier();
		self.previouslyDefendedAttacks(self.previouslyDefendedAttacks() + 1);
		return dicePool;
	};

	self.meleeDefend = function() {
		var dicePool = self.meleeDefense();
		self.previouslyDefendedAttacks(self.previouslyDefendedAttacks() + 1);
		return dicePool;
	};

	self.guns = ko.observableArray([]);
	self.addGun = function(gun) {
		self.guns.push(gun);
		gun.setNpc(self);
	};
	for (var i in guns) {
		self.addGun(guns[i]);
	}

	self.meleeWeapons = ko.observableArray([]);
	self.addMeleeWeapon = function(meleeWeapon) {
		self.meleeWeapons.push(meleeWeapon);
		meleeWeapon.setNpc(self);
	};
	for (var i in meleeWeapons) {
		self.addMeleeWeapon(meleeWeapons[i]);
	}

	var MatrixDefense = function(name, attribute1, attribute2) {
		var self2 = this;
		self2.name = name;
		self2.modifier = ko.computed(function() {
			return attribute2() + attribute1() + self.conditionModifier() + self.initiative.hotSimModifier() + self.miscMatrixDefense();
		});
		self2.label = ko.computed(function () {
			return self2.name + ' ' + self2.modifier();
		});
	};

	self.miscMatrixDefense = ko.observable(0);
	self.matrixDefenses = [
		new MatrixDefense('Brute Force', self.willpower, self.firewall),
		new MatrixDefense('Hack On The Fly', self.intuition, self.firewall),
		new MatrixDefense('Hide', self.intuition, self.dataProcessing),
		new MatrixDefense('Perception', self.logic, self.logic), // todo: slease
		new MatrixDefense('Snoop', self.logic, self.firewall),
		new MatrixDefense('Trace', self.willpower, self.willpower) // todo: slease
	];
	self.matrixDefenses.lower = function() { self.miscMatrixDefense(self.miscMatrixDefense() - 1); };
	self.matrixDefenses.raise = function() { self.miscMatrixDefense(self.miscMatrixDefense() + 1); };
	self.matrixResistance = ko.computed(function() {
		return self.firewall() + self.firewall() + self.globalModifier(); // todo: device rating
	});

	self.clone = function() {
		var guns = [];
		for (var i in self.guns()) {
			guns.push(self.guns()[i].clone());
		}
		var meleeWeapons = [];
		for (var i in self.meleeWeapons()) {
			meleeWeapons.push(self.meleeWeapons()[i].clone());
		}
		return new Npc(name, attributes, armor, skills, guns, 
			bonusInitiativeDice, dataProcessing, firewall, meleeWeapons);
	};

	self.cloneMany = function(count) {
		var npcs = [];
		for (var i = 1; i <= count; i++) {
			var npc = self.clone();
			npc.name = npc.name.replace(/\{0\}/, i);
			npcs.push(npc);
		}
		return npcs;
	};
	console.log('Created npc ' + name);
}

function MeleeWeapon(name, accuracy, reach, damage, damageType, armorPenetration, linkedSkill) {
	var self = this;
	self.name = name;
	self.accuracy = accuracy;
	self.reach = reach;
	self.damage = damage;
	self.damageType = damageType;
	self.armorPenetration = armorPenetration;
	self.linkedSkill = linkedSkill;
	self.miscModifier = ko.observableIncremental(0);

	self.setNpc = function(npc) {
		self.modifier = ko.computed(function() {
			return npc.agility() + 
				npc.skills[self.linkedSkill] + 
				npc.conditionModifier() + 
				npc.meleeAttackModifiers() +
				npc.globalModifier() +
				self.miscModifier();
		});
		self.damageValue = ko.computed(function() { return npc.strength() + self.damage });
	};

	self.clone = function() {
		return new MeleeWeapon(name, accuracy, reach, damage, damageType, armorPenetration, linkedSkill);
	};
}

function Gun(name, accuracy, damage, damageType, armorPenetration, fireModes, recoilCompensation, maxAmmo, linkedSkill) {
	var self = this;
	self.name = name;
	self.accuracy = accuracy;
	self.damage = damage;
	self.damageType = damageType;
	self.armorPenetration = armorPenetration;
	self.recoilCompensation = recoilCompensation;
	self.maxAmmo = maxAmmo;
	self.usedAmmo = ko.observable(0);
	self.ammo = ko.computed(function() { return self.maxAmmo - self.usedAmmo(); });
	self.reload = function() {
		self.usedAmmo(0);
	};
	self.deviceRating = 2;
	self.linkedSkill = linkedSkill;
	self.miscModifier = ko.observableIncremental(0);

	self.clone = function() {
		return new Gun(name, accuracy, damage, damageType, armorPenetration, fireModes, recoilCompensation, maxAmmo, linkedSkill);
	};

	self.setNpc = function(npc) {
		self.modifier = ko.computed(function() {
			return npc.agility() + 
				npc.skills[self.linkedSkill] + 
				npc.conditionModifier() + 
				npc.rangedAttackStatusModifier() +
				npc.globalModifier() +
				self.miscModifier();
		});

		self.totalRecoilCompensation = ko.computed(function() { return npc.recoilCompensation() + self.recoilCompensation; });
		self.progressiveRecoil = ko.computed(function() { return self.totalRecoilCompensation() - npc.progressiveRecoil(); });
		self.recoilLabel = ko.computed(function() { return self.progressiveRecoil() + ' ' + (self.progressiveRecoil() >= 0 ? 'rc' : 'pr'); });

		var GunFireMode = function(mode) {
			var self2 = this;
			self2.mode = mode;
			self2.modifier = ko.computed(function() {
				var recoilCompensation = self2.mode.causesProgressiveRecoil ? self.progressiveRecoil() : self.totalRecoilCompensation();
				var progressiveRecoil = recoilCompensation - self2.mode.bulletsUsed;
				if (progressiveRecoil >= 0) return self.modifier();
				return self.modifier() + progressiveRecoil;
			});
			self2.label = ko.computed(function() {
				return mode.name + ' ' + self2.modifier() + '(-' + mode.bulletsUsed + ')'
			});
		};
		self.fireModes = [];
		for (var i in fireModes) {
			self.fireModes.push(new GunFireMode(fireModes[i]));
		}
	};
}

//function Gun(name, accuracy, damage, damageType, armorPenetration, fireModes, recoilCompensation, maxAmmo, linkedSkill) {
var Guns = {
	AresPredatorV: function () { return new Gun('Ares Predator V', 5, 8, 'P', -1, [FireMode.SA,FireMode.SB], 0, 15, 'pistols'); },
	BrowningUltraPower: function () { return new Gun('Browning Ultra-Power', 6, 8, 'P', -1, [FireMode.SA,FireMode.SB], 0, 10, 'pistols'); },
	RugerSuperWarhawk: function () { return new Gun('Ruger Super Warhawk', 5, 9, 'P', -2, [FireMode.SS], 0, 6, 'pistols'); },
	ColtGovernment2066: function () { return new Gun('Colt Government 2066', 6, 7, 'P', -1, [FireMode.SA,FireMode.SB], 0, 14, 'pistols'); },
	ColtCobraTZ120: function () { return new Gun('Colt Cobra TZ-120', 5, 7, 'P', 0, [FireMode.SA,FireMode.BF,FireMode.FA], 3, 32, 'automatics'); },
	AK97: function () { return new Gun('AK-97', 5, 10, 'P', -2, [FireMode.SA,FireMode.BF,FireMode.FA], 0, 38, 'automatics'); },
	Bow: function (rating) { return new Gun('Bow ' + rating, 6, rating + 2, 'P', -Math.ceil(rating / 4), [FireMode.SS], 0, 99, 'automatics'); },
	DefianceT250: function () { return new Gun('Defiance T-250', 4, 10, 'P', -1, [FireMode.SS,FireMode.SA,FireMode.SB], 0, 5, 'longArms'); },
	IngramValiant: function () { return new Gun('Ingram Valiant', 6, 9, 'P', -2, [FireMode.BF,FireMode.FA], 3, 100, 'automatics'); },
	AresAlpha: function () { return new Gun('Ares Alpha', 7, 11, 'P', -2, [FireMode.SA,FireMode.BF,FireMode.FA], 2, 42, 'automatics'); },
};

//function MeleeWeapon(name, accuracy, reach, damage, damageType, armorPenetration, linkedSkill) {
var MeleeWeapons = {
	Knife: function() { return new MeleeWeapon('Knife', 5, 0, 1, 'P', -1, 'blades') },
	CombatKnife: function() { return new MeleeWeapon('Combat Knife', 6, 0, 2, 'P', -3, 'blades') },
	Sword: function() { return new MeleeWeapon('Sword', 6, 1, 3, 'P', -2, 'blades') },
	ThrowingKnife: function() { return new MeleeWeapon('Throwing Knife', 6, 0, 1, 'P', -1, 'blades') },
	Claws: function() { return new MeleeWeapon('Claws', 8, 0, 3, 'P', -1, 'unarmed') },
	Horns: function() { return new MeleeWeapon('Horns', 8, 1, 5, 'P', 0, 'unarmed') },
	Bite: function(damage) { return new MeleeWeapon('Horns', 8, 1, damage, 'P', 0, 'unarmed') },
	Natural: function(damage) { return new MeleeWeapon('Natural', 8, 0, damage, 'P', 0, 'unarmed') },
};

function log(success, msg) {
	if (success !== true && success !== false) {
		msg = success;
		success = true;
	}

	if (success) alertify.success(msg);
	else alertify.error(msg);

	if (msg.replace) msg = msg.replace("<br/>", "\r\n");
	console.log(msg);
};

function AppViewModel() {
	var self = this;
	self.newEncounterName = ko.observable('');
	self.savedEncounters = ko.observableArray([]);
	self.selectedEncounter = ko.observable();
	var encounters = JSON.parse(localStorage.getItem('encounters'));
	if (encounters) {
		for (var i in encounters) {
			self.savedEncounters.push({name: i, value: encounters[i]});
		}
	}

	var loadCompressedEncounter = function(compressedEncounter) {
		console.log(compressedEncounter)
		var encounterData = uncompressEncounter(compressedEncounter);
		console.log(encounterData);
		var npcs = parseEncounterData(encounterData);
		console.log(npcs)
		loadNpcs(npcs);
	};

	var uncompressEncounter = function(compressedEncounter) {
		var data = LZString.decompressFromBase64(compressedEncounter).split(',');

		for (var i = 0; i < data.length; i++) {
			if (!isNaN(data[i])) data[i] = parseInt(data[i]);
			if (data[i] == "true" || data[i] == "false") data[i] = data[i] == "true";
		}

		return data;
	};

	var parseEncounterData = function(data) {
		var npcs = [];
		for (var i = 0; i+10 < data.length; ) {
			var npc = {};
			npc.name = data[i++];

			npc.attributes = {};
			npc.attributes.body = data[i++];
			npc.attributes.agility = data[i++];
			npc.attributes.reaction = data[i++];
			npc.attributes.strength = data[i++];
			npc.attributes.willpower = data[i++];
			npc.attributes.logic = data[i++];
			npc.attributes.intuition = data[i++];
			npc.attributes.charisma = data[i++];
			npc.attributes.edge = data[i++];
			npc.attributes.magic = data[i++];
			npc.attributes.essence = data[i++];

			npc.armor = data[i++];

			npc.skills = {};
			npc.skills.pistols = data[i++];
			npc.skills.automatics = data[i++];
			npc.skills.longArms = data[i++];
			npc.skills.blades = data[i++];
			npc.skills.unarmed = data[i++];

			npc.initiative = {};
			npc.initiative.bonusDice = data[i++];
			npc.initiative.mode = data[i++];
			npc.initiative.rolledScore = data[i++];

			npc.dataProcessing = data[i++];
			npc.firewall = data[i++];

			npc.activeStatusMenu = data[i++];
			npc.isActive = data[i++];
			npc.hasActed = data[i++];
			npc.isPC = data[i++];
			npc.edging = data[i++];
			npc.edgePoints = data[i++];
			npc.useStun = data[i++];
			npc.miscDefenseMod = data[i++];
			npc.previouslyDefendedAttacks = data[i++];
			npc.resistanceMiscModifier = data[i++];
			npc.resistanceMiscModifier = data[i++];
			npc.progressiveRecoil = data[i++];
			npc.miscMatrixDefense = data[i++];
			npc.sustains = data[i++];

			var c = data[i++];
			npc.guns = [];
			for (var x = 0; x < c; x++) {
				npc.guns[x] = {};
				npc.guns[x].name = data[i++];
				npc.guns[x].accuracy = data[i++];
				npc.guns[x].damage = data[i++];
				npc.guns[x].damageType = data[i++];
				npc.guns[x].armorPenetration = data[i++];
				npc.guns[x].fireModes = data[i++];
				npc.guns[x].recoilCompensation = data[i++];
				npc.guns[x].maxAmmo = data[i++];
				npc.guns[x].linkedSkill = data[i++];
				npc.guns[x].usedAmmo = data[i++];
				npc.guns[x].miscModifier = data[i++];
			}

			var c = data[i++];
			npc.meleeWeapons = [];
			for (var x = 0; x < c; x++) {
				npc.meleeWeapons[x] = {};
				npc.meleeWeapons[x].name = data[i++];
				npc.meleeWeapons[x].accuracy = data[i++];
				npc.meleeWeapons[x].reach = data[i++];
				npc.meleeWeapons[x].damage = data[i++];
				npc.meleeWeapons[x].damageType = data[i++];
				npc.meleeWeapons[x].armorPenetration = data[i++];
				npc.meleeWeapons[x].linkedSkill = data[i++];
				npc.meleeWeapons[x].miscModifier = data[i++];
			}
			npcs.push(npc);
		}
		return npcs;
	};

	var loadNpcs = function(npcs) {
		var npcsVM = [];
		for (var n in npcs) {
			var npc = npcs[n];

			var npcVM = new Npc(npc.name, npc.attributes, npc.armor, npc.skills, [], npc.initiative.bonusDice, npc.dataProcessing, npc.firewall, []);
			npcVM.activeStatusMenu(npc.activeStatusMenu);
			npcVM.isActive(npc.isActive);
			npcVM.hasActed(npc.hasActed);
			npcVM.isPC = npc.isPC;
			npcVM.edging(npc.edging);
			npcVM.edgePoints(npc.edgePoints);
			npcVM.useStun(npc.useStun);
			npcVM.miscDefenseMod(npc.miscDefenseMod);
			npcVM.previouslyDefendedAttacks(npc.previouslyDefendedAttacks);
			npcVM.resistanceMiscModifier(npc.resistanceMiscModifier);
			npcVM.resistanceMiscModifier(npc.resistanceMiscModifier);
			npcVM.progressiveRecoil(npc.progressiveRecoil);
			npcVM.miscMatrixDefense(npc.miscMatrixDefense);

			npcVM.initiative.mode(npc.initiative.mode);
			npcVM.initiative.rolledScore(npc.initiative.rolledScore);

			for (var g in npc.guns) {
				var gun = npc.guns[g];

				var gunVM = new Gun(gun.name, gun.accuracy, gun.damage, gun.damageType, gun.armorPenetration, gun.fireModes, gun.recoilCompensation, gun.maxAmmo, gun.linkedSkill);
				gunVM.usedAmmo(gun.usedAmmo);
				gunVM.miscModifier(gun.miscModifier);

				npcVM.addGun(gunVM);
			}

			for (var w in npc.meleeWeapons) {
				var weapon = npc.meleeWeapons[w];

				var weaponVM = new MeleeWeapon(weapon.name, weapon.accuracy, weapon.reach, weapon.damage, weapon.damageType, weapon.armorPenetration, weapon.linkedSkill);
				weaponVM.miscModifier(weapon.miscModifier);

				npcVM.addMeleeWeapon(weaponVM);
			}

			npcsVM.push(npcVM);
		}
		self.npcs(npcsVM);
	};

//function Npc(name, attributes, armor, skills, guns, bonusInitiativeDice, dataProcessing, firewall, meleeWeapons) {
//function NpcAttributes(body, agility, reaction, strength, willpower, logic, intuition, charisma, edge, magic, essence) {

	self.npcs = ko.observableArray([]);
	if (location.href.indexOf('#') != -1) {
		var compressedEncounter = location.href.substring(location.href.indexOf('#')+1);
		loadCompressedEncounter(compressedEncounter);
	}
	else if (location.href.indexOf('02') != -1) {
		self.npcs([new Npc('Defense Turret', new NpcAttributes(6, 4, 4, 12, 4, 4, 4, 4, 0, 0, 0), 12, {automatics: 4}, [Guns.IngramValiant()], 3, 4, 4, [])]);
	}
	else if (location.href.indexOf('03') != -1) {
		self.npcs(new Npc('Hellhound Ganger', new NpcAttributes(4, 4, 4, 4, 3, 2, 3, 3, 1, 0, 6), 10, {unarmed: 3, blades: 4, pistols: 4}, [Guns.BrowningUltraPower()], 
			1, 3, 3, [MeleeWeapons.Knife()]).cloneMany(12));
	}
	else if (location.href.indexOf('04') != -1) {
		self.npcs([
			new Npc('Gunner 1', new NpcAttributes(4, 6, 6, 5, 5, 2, 4, 3, 3, 0, 6), 0, {unarmed: 6, automatics: 6, blades: 5}, [Guns.AresAlpha()], 3, 0, 0, [MeleeWeapons.CombatKnife()]), 
			new Npc('Gunner 2', new NpcAttributes(4, 6, 6, 5, 5, 2, 4, 3, 3, 0, 6), 0, {unarmed: 6, automatics: 6, blades: 5}, [Guns.AresAlpha()], 3, 0, 0, [MeleeWeapons.CombatKnife()]),
			new Npc('Sniper', new NpcAttributes(4, 6, 6, 5, 5, 2, 4, 3, 3, 0, 6), 0, {unarmed: 6, automatics: 6, blades: 5}, [Guns.AresAlpha()], 3, 0, 0, [MeleeWeapons.CombatKnife()]),
			new Npc('Sniper', new NpcAttributes(4, 6, 6, 5, 5, 2, 4, 3, 3, 0, 6), 0, {unarmed: 6, automatics: 6, blades: 5}, [Guns.AresAlpha()], 3, 0, 0, [MeleeWeapons.CombatKnife()])
		]);
	}

//function AddPc(name, reaction, intuition, bonusInitiativeDice, dataProcessing, firewall) {
	self.npcs.push(AddPc('Gunther', 4, 4, 0, 4, 4));
	self.npcs.push(AddPc('Odder', 4, 5, 0, 2, 2));
	self.npcs.push(AddPc('SIMaeon', 2, 5, 0, 4, 3));
	self.npcs.push(AddPc('Takashi', 6, 4, 1, 6, 6));
	self.npcs.push(AddPc('Roto Drone', 3, 3, 3, 6, 6));
	self.npcs.push(AddPc('Roto Drone', 3, 3, 3, 6, 6));

	self.attackModifiers = Status.attackModifiers();
	self.defenseModifiers = Status.defenseModifiers();
	self.fireModes = FireMode.asArray();

	var generalOutput = function(desc, diceResult) {
		var msg = desc + '.';
		if (diceResult.glitch) {
			msg += 'Glitch.';
		}
		msg += '<br/>';
		if (diceResult.explodeDice > 0) {
			msg += diceResult.explodeDice + ' exploded.<br/>';
		}
		msg += diceResult.dice + ' dice / ' + diceResult.hits + ' hits';
		log(!diceResult.glitch,msg);
	};

	var sortByInitiative = function(a, b) {
		if (a.initiative.score() > b.initiative.score()) return -1;
		if (a.initiative.score() < b.initiative.score()) return 1;
		return 0;
	};

	self.startCombatTurn = function() {
		log("Starting new combat turn");
		for (var i in self.npcs()) {
			self.npcs()[i].initiative.roll();
			self.npcs()[i].hasActed(false);
			self.npcs()[i].isActive(false);
			self.npcs()[i].newCombatTurn();
		}
		self.npcs.sort(sortByInitiative);
		self.npcs()[0].startTurn();
		//$.scrollTo('.character:eq(0)', 300);
	};

	self.startNextInitiativePass = function() {
		log("Starting new initiative pass");
		for (var i in self.npcs()) {
			self.npcs()[i].initiative.changeScore(-10);
			if (self.npcs()[i].initiative.score() > 0) {
				self.npcs()[i].hasActed(false);
			}
		}
		self.npcs()[0].startTurn();
		$.scrollTo('.character:eq(0)', 300);
	};

	self.endTurn = function() {
		console.log(1)
		for (var i = 0; i < self.npcs().length; i++) {
			if (self.npcs()[i].isActive()) {
				self.npcs()[i].endTurn();
			}
		}
		self.npcs.sort(sortByInitiative);

		var anyCanActThisPass = false;
		var anyCanActNextPass = false;
		for (var i = 0; i < self.npcs().length; i++) {
			var npc = self.npcs()[i];
			if (!npc.hasActed() && npc.initiative.score() > 0) {
				anyCanActThisPass = true;
				npc.startTurn();
				$.scrollTo('.character:eq(' + i +')', 300);
				break;
			}
			if (npc.initiative.score() > 10) {
				anyCanActNextPass = true;
			}
		}

		if (!anyCanActThisPass) {
			if (anyCanActNextPass) {
				self.startNextInitiativePass();
			}
			else {
				self.startCombatTurn();
			}
		}
	}

	self.rollMatrixDefense = function(npc, matrixDefense) {
		var dicePool = matrixDefense.modifier();
		generalOutput('Matrix Defense', roll(dicePool, npc.useEdge()));
	};

	self.rollGunDefense = function(npc, fireMode) {
		var dicePool = npc.gunDefend(fireMode);
		generalOutput('Defense', roll(dicePool, npc.useEdge()));
	};

	self.rollMeleeDefense = function(npc) {
		var dicePool = npc.meleeDefend();
		generalOutput('Defense', roll(dicePool, npc.useEdge()));
	};

	self.rollResistance = function(npc) {
		generalOutput('Resistance', roll(npc.resistance(), npc.useEdge()));
	};

	self.rollMatrixResistance = function(npc) {
		generalOutput('Matrix Resistance', roll(npc.matrixResistance(), npc.useEdge()));
	};

	self.shoot = function(npc, gun, mode) {
		var diceResults = roll(npc.shoot(gun, mode), npc.useEdge());
		generalOutput(gun.name + ' ' + mode.mode.name + '<br/>' + gun.damage + gun.damageType + ' DV ' + gun.accuracy + ' acc', diceResults);
	};

	self.rollMeleeAttack = function(npc, meleeWeapon) {
		var diceResults = roll(meleeWeapon.modifier(), npc.useEdge());
		generalOutput(meleeWeapon.name + '<br/>' + meleeWeapon.damageValue() + meleeWeapon.damageType + ' DV ' + meleeWeapon.accuracy + ' acc', diceResults);
	};

	self.rollSpellcasting = function(npc) {
		var diceResults = roll(npc.spellcasting(), npc.useEdge());
		generalOutput('Spellcasting', diceResults);
	};

	self.toggleDefenseModifier = function(npc, modifier, event) {
		var $target = $(event.target);

		if (npc.toggleDefenseModifier(modifier)) {
			$target.addClass('on');
		}
		else {
			$target.removeClass('on');
		}
	}

	self.saveEncounter = function(vm) {
		var o = ko.toJS(vm);
		var s = "";
		var p = function(d) {
			s+=d+',';
		}
		for (var n in o.npcs) {
			var x = o.npcs[n];
			p(x.name);

			p(x.attributes.body);
			p(x.attributes.agility);
			p(x.attributes.reaction);
			p(x.attributes.strength);
			p(x.attributes.willpower);
			p(x.attributes.logic);
			p(x.attributes.intuition);
			p(x.attributes.charisma);
			p(x.attributes.edge);
			p(x.attributes.magic);
			p(x.attributes.essence);

			p(x.armor);

			p(x.skills.pistols);
			p(x.skills.automatics);
			p(x.skills.longArms);
			p(x.skills.blades);
			p(x.skills.unarmed);

			p(x.initiative.bonusDice);
			p(x.initiative.mode);
			p(x.initiative.rolledScore);

			p(x.dataProcessing);
			p(x.firewall);

			p(x.activeStatusMenu);
			p(x.isActive);
			p(x.hasActed);
			p(x.isPC)
			p(x.edging);
			p(x.edgePoints);
			p(x.useStun);
			p(x.miscDefenseMod);
			p(x.previouslyDefendedAttacks);
			p(x.resistanceMiscModifier);
			p(x.resistanceMiscModifier);
			p(x.progressiveRecoil);
			p(x.miscMatrixDefense);
			p(x.sustains);

			p(x.guns.length);
			for (var g in x.guns) {
				var y = x.guns[g];
				p(y.name);
				p(y.accuracy);
				p(y.damage);
				p(y.damageType);
				p(y.armorPenetration);
				p(y.fireModes);
				p(y.recoilCompensation);
				p(y.maxAmmo);
				p(y.linkedSkill);
				p(y.usedAmmo);
				p(y.miscModifier);

			}

			p(x.meleeWeapons.length);
			for (var g in x.meleeWeapons) {
				var y = x.meleeWeapons[g];
				p(y.name);
				p(y.accuracy);
				p(y.reach);
				p(y.damage);
				p(y.damageType);
				p(y.armorPenetration);
				p(y.linkedSkill);
				p(y.miscModifier);
			}
		}

		console.log(s);
		var cs = LZString.compressToBase64(s);
		console.log(cs);
		console.log(cs.length);

		var encounters = JSON.parse(localStorage.getItem('encounters'));
		if (!encounters) encounters = {};
		encounters[self.newEncounterName()] = cs;
		localStorage.setItem('encounters', JSON.stringify(encounters));
		self.savedEncounters.push({name: self.newEncounterName(), value: cs});
		location.href = '#' + cs;
	};

	self.loadEncounter = function() {
		if (!self.selectedEncounter()) return;

		var compressedEncounter = self.selectedEncounter().value;
		loadCompressedEncounter(compressedEncounter);
	};
}

function rollSum(dice) {
	var sum = 0;
	for (var i = 0; i < dice; i++) {
		sum += Math.floor((Math.random() * 6) + 1);
	}
	return sum;
}

function roll(dice, explode) {
	var dice = dice < 0 ? 0 : dice;
	var hits = 0;
	var ones = 0;
	var explodeDice = 0;
	for (var i = 0; i < dice + explodeDice; i++) {
		var result = Math.floor((Math.random() * 6) + 1);
		if (result < 1 || result > 6) alert ('Dice roll was out of range. ' + result);
		if (result == 1) ones++;
		if (result >= 5) hits++;
		if (result == 6 && explode) explodeDice++;
	}
	var rollResult = { dice: dice, explodeDice: explodeDice, hits: hits };
	if (ones > (dice + explodeDice) / 2) {
		rollResult.glitch = true;
		return rollResult;
	}
	return rollResult;
}

// Activates knockout.js
$(function() {
	window.m = new AppViewModel();
	ko.applyBindings(window.m);
});
</script>
<link href="view.css" type="text/css" rel="stylesheet"></link>
</head>

<body>
<div>
	<button data-bind="click: startCombatTurn">New Combat Turn</button>
	<input type="text" data-bind="value: newEncounterName" />
	<button data-bind="click: saveEncounter">Save</button>
	<span data-bind="visible: savedEncounters().length > 0">
		<select data-bind="options: savedEncounters, optionsText: 'name', value: selectedEncounter"></select>
		<button data-bind="click: function() { loadEncounter() }">Load</button>
		<button data-bind="click: function() { deleteEncounter() }">Delete</button>
	</span>
</div>
<div data-bind="foreach: npcs">
	<div class="character" data-bind="css: { active: isActive, npc: !isPC, pc: isPC }">
		<h1 class="name"><span data-bind="text: name"></span>; <span class="initiative" data-bind="text: initiative.label()"></span></h1>
		<ul class="statline title">
			<li>B</li>
			<li>A</li>
			<li>R</li>
			<li>S</li>
			<li>W</li>
			<li>L</li>
			<li>I</li>
			<li>C</li>
			<li>Ess</li>
			<li>E</li>
			<li>M</li>
			<li class="incremental" data-bind="event: {contextmenu: dataProcessing.lower}, click: dataProcessing.raise">DP</li>
			<li class="incremental" data-bind="event: {contextmenu: firewall.lower}, click: firewall.raise">FW</li>
		</ul>
		<ul class="statline">
			<li data-bind="text: body"></li>
			<li data-bind="text: agility"></li>
			<li data-bind="text: reaction"></li>
			<li data-bind="text: strength"></li>
			<li data-bind="text: willpower"></li>
			<li data-bind="text: logic"></li>
			<li data-bind="text: intuition"></li>
			<li data-bind="text: charisma"></li>
			<li data-bind="text: essence"></li>
			<li data-bind="text: edge"></li>
			<li data-bind="text: magic"></li>
			<li data-bind="text: dataProcessing"></li>
			<li data-bind="text: firewall"></li>
		</ul>
		<div class="end-turn">
			<span data-bind="foreach: initiative.otherModes">
				<button data-bind="text: $data, click: $parent.initiative.changeMode"></button>
			</span>
			<button data-bind="click: function() { initiative.changeScore(-5); }">-5</button>
			<button data-bind="click: function() { initiative.changeScore(-10); }">-10</button>
			<button data-bind="click: $root.endTurn">End Turn</button>
		</div>
<!-- condition -->
		<div class="action-grp">
			<button data-bind="text: physicalTrack.label(), event: {contextmenu: physicalTrack.healDamage}, click: physicalTrack.takeDamage"></button>
			<button data-bind="visible: useStun, text: stunTrack.label(), event: {contextmenu: stunTrack.healDamage}, click: stunTrack.takeDamage"></button>
			<label><input type="checkbox" data-bind="checked: useStun" />Stun</label>
			<label data-bind="visible: edgePoints() > 0"><input type="checkbox" data-bind="checked: edging" />Edging(<span data-bind="text: edgePoints"></span>)</label>
		</div>
		<div data-bind="visible: !isPC">
<!-- defense -->
			<div class="action-grp">
				<button data-bind="text: 'Defense ' + defense() + '(' + miscDefenseMod() + ')', event: {contextmenu: lowerDefense}, click: raiseDefense"></button>
				<span data-bind="foreach: defenseFireModes" class="action-grp">
					<button class="fixed-wide" data-bind="text: label, click: function() { $root.rollGunDefense($parent, $data); }"></button>
				</span>
				<button data-bind="text: 'Melee ' + meleeDefense(), click: $root.rollMeleeDefense"></button>
			</div>
<!-- magic -->
			<div class="action-grp">
				<button data-bind="text: 'Sustains ' + sustains(), event: {contextmenu: sustains.lower}, click: sustains.raise"></button>
				<button data-bind="text: 'Counterspells ' + counterSpellPool(), event: {contextmenu: counterSpellPool.used.lower}, click: counterSpellPool.used.raise"></button>
				<button data-bind="text: 'Spellcasting ' + spellcasting(), click: function() { $root.rollSpellcasting($data); }"></button>
				<!--<button data-bind="text: 'Body Defense ' + physicalSpellDefense(), click: function() { $root.rollSpellcasting($data); }"></button>
				<button data-bind="text: 'Mana Defense ' + manaSpellDefense(), click: function() { $root.rollSpellcasting($data); }"></button>
				<button data-bind="text: 'W+L Defense ' + willLogicSpellDefense(), click: function() { $root.rollSpellcasting($data); }"></button>
				<button data-bind="text: 'L+I Defense ' + logicIntuitionSpellDefense(), click: function() { $root.rollSpellcasting($data); }"></button>-->
			</div>
<!-- matrix defense -->
			<div class="action-grp">
				<button data-bind="text: 'Matrix Mod ' + miscMatrixDefense(), event: {contextmenu: matrixDefenses.lower}, click: matrixDefenses.raise"></button>
				<span data-bind="foreach: matrixDefenses">
					<button data-bind="text: label, click: function() { $root.rollMatrixDefense($parent, $data); }"></button>
				</span>
			</div>
<!-- resistance -->
			<div class="action-grp">
				<button data-bind="text: 'Physical Resistance Mod ' + resistance() + '(' + resistanceMiscModifier() + ')', 
					event: {contextmenu: lowerResistance}, click: raiseResistance"></button>
				<button data-bind="click: $root.rollResistance">Resist Physical Damage</button>
				<button data-bind="click: $root.rollMatrixResistance">Resist Matrix Damage</button>
<!--
				<button data-bind="text: 'Resist Magical ' + resistance() + '(' + resistanceMiscModifier() + ')', 
					event: {contextmenu: lowerResistance}, click: raiseResistance"></button>
				<button data-bind="text: 'Resist Magical'"></button>
-->
			</div>
<!-- guns -->
			<div class="action-grp" data-bind="foreach: guns">
				<div class="action-grp">
					<button data-bind="text: name + ' ' + modifier() + '(' + miscModifier() + ')', click: miscModifier.raise, event: { contextmenu: miscModifier.lower }"></button>
					<span data-bind="foreach: fireModes">
						<button class="fixed-wide" data-bind="text: label, click: function() { $root.shoot($parents[1], $parent, $data); }"></button> 
					</span>
					<button data-bind="text: recoilLabel, click: $parent.resetRecoil"></button>
					<button data-bind="text: ammo() + ' ammo', click: reload"></button>
				</div>
			</div>
<!-- melee -->
			<div data-bind="foreach: meleeWeapons">
				<div class="action-grp">
					<button data-bind="text: name + ' ' + modifier() + '(' + miscModifier() + ')', click: miscModifier.raise, event: { contextmenu: miscModifier.lower }"></button>
					<button data-bind="click: function() { $root.rollMeleeAttack($parent, $data) }">Attack</button> 
				</div>
			</div>
			<div class="action-grp">
				<label><input name="status-mod-choice" type="radio" value="hide" data-bind="checked: activeStatusMenu">Hide</label>
				<label><input name="status-mod-choice" type="radio" value="defense" data-bind="checked: activeStatusMenu">Defense Mods</label>
				<label><input name="status-mod-choice" type="radio" value="attack" data-bind="checked: activeStatusMenu">Attack Mods</label>
			</div>
<!-- defense mods -->
			<div class="defense-status-mods" data-bind="foreach: $root.defenseModifiers, css: { on: activeStatusMenu() == 'defense' }" class="action-grp">
				<button data-bind="text: $data.key + ' ' + $data.defenseMod, css: { on: false }, click: function(data, evt) { return $root.toggleDefenseModifier($parent, data, evt); }" class="modifier"></button>
			</div>
<!-- attack mods -->
			<div class="attack-status-mods" data-bind="foreach: $root.attackModifiers, css: { on: activeStatusMenu() == 'attack' }" class="action-grp">
				<button data-bind="text: $data.key + ' ' + $data.attackMod, css: { on: false }, click: function(data, evt) { return $root.toggleDefenseModifier($parent, data, evt); }" class="modifier"></button> 
			</div><br/>
		</div>
	</div>
</div>
</body>

</html>