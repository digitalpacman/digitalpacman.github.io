<!DOCTYPE html>
<html>
<head>
<title>Title of the document</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.3.0/knockout-min.js"></script>
<script src="https://code.jquery.com/jquery-2.1.3.min.js"></script>
<script>
var Skill = {
	Pistols: "Pistols"
};

function Npc() {
	var self = this;
	self.name = "wee";
	self.body = 3;
	self.agility = 3;
	self.reaction = 3;
	self.strength = 3;
	self.willpower = 3;
	self.logic = 3;
	self.intuition = 3;
	self.charisma = 3;
	self.edge = 3;
	self.magic = 0;
	self.essence = 6;
	self.conditionMonitor = ko.computed(function() { return Math.ceil(self.body / 2) + 8; });
	self.damageBoxes = ko.observable(0);
	self.undamagedBoxes = ko.computed(function() { return self.conditionMonitor() - self.damageBoxes(); });
	self.armor = 0;
	self.previouslyDefendedAttacks = ko.observable(0);

	self.guns = ko.observableArray([new Gun()]);
	self.meleeWeapons = ko.observableArray([]);

	self.skills = {};
	self.skills[Skill.Pistols] = 3;

	self.statuses = ko.observableArray([]);
	self.conditionModifier = ko.computed(function() { return -Math.floor(self.damageBoxes() / 3); });
	self.miscDefenseMod = ko.observable(0);
	self.defense = ko.computed(function() { return self.reaction + self.intuition + self.miscDefenseMod(); });
	self.resistance = ko.computed(function() { return self.armor + self.body; });

	self.recoilCompensation = ko.computed(function() { return Math.ceil(self.strength / 3) + 1; });
	self.progressiveRecoil = ko.observable(0);
	self.recoilModifier = function(gunRecoilCompensation) {
		var recoilCompensation = self.recoilCompensation() + gunRecoilCompensation;
		if (recoilCompensation >= self.progressiveRecoil()) return 0;

		return self.progressiveRecoil() - self.progressiveRecoil();
	};

	self.statusModifier = function(status, modifier) {
		for (var i = 0; i < self.statuses().length; i++) {
			if (self.statuses()[i] == status)
				return modifier ? modifier : status.value;
		}
	};

	self.sumModifiers = function(prop) {
		var sum = 0;
		for (var i = 0; i < self.statuses().length; i++) {
			for (var x = 0; x < arguments.length; x++) {
				if (self.statuses()[i] == arguments[x]) {
					sum += self.statuses()[i][prop];
				}
			}
		}
		return sum;
	};

	self.gunAttackModifiers = ko.computed(function() {
		return self.sumModifiers("attackMod",
			Status.BlindFire,
			Status.BlindFireWithImaging,
			Status.InMelee,
			Status.Running,
			Status.CalledShot,
			Status.SmartGun,
			Status.ImplantedSmartGun);
	});

	self.meleeAttackModifiers = ko.computed(function() {
		return self.sumModifiers("attackMod",
			Status.Charging,
			Status.Prone,
			Status.CalledShot,
			Status.SuperiorPosition,
			Status.FriendsInMelee,
			Status.TouchOnly);
	});

	self.defenseModifiers = ko.computed(function() {
		return self.sumModifiers("defenseMod",
			Status.InMovingVehicle,
			Status.Prone,
			Status.ReceivingCharge,
			Status.Running,
			Status.GoodCover,
			Status.PartialCover,
			Status.InMelee,
			Status.Prone);
	});

	self.shoot = function(gun, fireMode) {
		gun.usedAmmo(gun.usedAmmo + fireMode.bulletsUsed);
		gun.progressiveRecoil(gun.progressiveRecoil() + fireMode.bulletsUsed);

		return self.agility + 
			self.skills[gun.linkedSkill] + 
			self.conditionModifier() + 
			self.recoilModifier(gun.recoilCompensation) +
			self.gunAttackModifiers();
	};

	self.melee = function(weapon) {
		var dicePool = self.agility + 
			self.skills[weapon.linkedSkill] + 
			self.conditionModifier() + 
			self.meleeAttackModifiers();

	};

	self.defenseModifier = ko.computed(function() {
		return self.defense() +
			self.conditionModifier() + 
			self.defenseModifiers() -
			self.previouslyDefendedAttacks();
	});

	self.defend = function(defenseMod) {
		var dicePool = self.defenseModifier() + defenseMod;
		self.previouslyDefendedAttacks(self.previouslyDefendedAttacks() + 1);
		return dicePool;
	};
}

var FireModeEnum = function(name, bulletsUsed, defenseMod) {
	var self = this;
	self.name = name;
	self.bulletsUsed = bulletsUsed;
	self.defenseMod = defenseMod;
}

var FireMode = {
	SS: new FireModeEnum("SS", 1, 0),
	SA: new FireModeEnum("SA", 1, 0),
	SB: new FireModeEnum("SB", 3, -2),
	BF: new FireModeEnum("BF", 3, -2),
	FA: new FireModeEnum("FA", 10, -9),
	asArray: function() {
		var arr = [];
		for (var x in this) {
			if (typeof this[x] == "object") {
				arr.push(this[x]);
			}
		}
		return arr;
	}
}

var StatusEnum = function(key, attackMod, defenseMod) {
	var self = this;
	self.key = key;
	self.attackMod = attackMod;
	self.defenseMod = defenseMod;
};

var Status = {
	BlindFire: new StatusEnum("BlindFire", -6, 0),
	BlindFireWithImaging: new StatusEnum("BlindFireWithImaging", -3, 0),
	CalledShot: new StatusEnum("CalledShot", -4, 0),
	Charging: new StatusEnum("Charging", 2, 0),
	FriendsInMelee: new StatusEnum("FriendsInMelee", 1, 0),
	GoodCover: new StatusEnum("GoodCover", 0, 4),
	ImplantedSmartGun: new StatusEnum("ImplantedSmartGun", 2, 0),
	InMelee: new StatusEnum("InMelee", -3, -3),
	InMovingVehicle: new StatusEnum("InMovingVehicle", 0, 3),
	PartialCover: new StatusEnum("PartialCover", 0, 2),
	Prone: new StatusEnum("Prone", -1, -2),
	ReceivingCharge: new StatusEnum("ReceivingCharge", 0, 1),
	Running: new StatusEnum("Running", -2, 2),
	SmartGun: new StatusEnum("SmartGun", 1, 0),
	SuperiorPosition: new StatusEnum("SuperiorPosition", 2, 0),
	TouchOnly: new StatusEnum("TouchOnly", 2, 0),
	asArray: function() {
		var arr = [];
		for (var x in this) {
			if (typeof this[x] == "object") {
				arr.push(this[x]);
			}
		}
		return arr;
	}
};

function Gun() {
	var self = this;
	self.name = "";
	self.accuracy = 5;
	self.damage = 9;
	self.damageType = "P";
	self.armorPenetration = -1;
	self.modes = "SA";
	self.recoilCompensation = 2;
	self._ammo = 11;
	self.usedAmmo = ko.observable(0);
	self.ammo = function() { return self._ammo - self.usedAmmo(); };
	self.deviceRating = 2;
	self.linkedSkill = Skill.Pistols;
}

function AppViewModel() {
	var self = this;

	self.npcs = ko.observableArray([new Npc()]);
	self.modifiers = Status.asArray();
	self.fireModes = FireMode.asArray();

	var generalOutput = function(desc, diceResult) {
		if (diceResult.glitch) {
			console.log(desc + '. Glitch. ' + diceResult.hits + ' hits');
		}
		else {
			console.log(desc + '. ' + diceResult.hits + ' hits');
		}
	};

	self.rollDefense = function(npc, fireMode) {
		var dicePool = npc.defend(fireMode.defenseMod);
		generalOutput('Defense', roll(dicePool));
	};

	self.rollResistance = function(npc) {
		generalOutput('Resistance', roll(npc.resistance()));
	};

	self.lowerDefense = function(npc) {
		npc.miscDefenseMod(npc.miscDefenseMod() - 1);
	};

	self.raiseDefense = function(npc) {
		npc.miscDefenseMod(npc.miscDefenseMod() + 1);
	};

	self.lowerCondition = function(npc) {
		npc.damageBoxes(npc.damageBoxes() + 1);
	};

	self.raiseCondition = function(npc) {
		npc.damageBoxes(npc.damageBoxes() - 1);
	};

	self.lowerResistance = function(npc) {
		npc.resistance(npc.resistance() - 1);
	};

	self.raiseResistance = function(npc) {
		npc.resistance(npc.resistance() + 1);
	};

	self.rollSemiAuto = function(npc, gun) {
		self.resetRecoil(gun);
		gun.loadedAmmo(gun.loadedAmmo() - 1);
		generalOutput(gun.name + ' Semi Auto', roll(gun.dicePool() + npc.rangedAttackModifier()));
		console.log(gun.dmg + ' DV ' + gun.ap + ' AP');
	};

	self.rollSemiAutoBurst = function(npc, gun) {
		gun.recoil(gun.recoil() - 3);
		gun.loadedAmmo(gun.loadedAmmo() - 3);		
		generalOutput(gun.name + ' Semi Auto Burst', roll(gun.dicePool() + npc.rangedAttackModifier()));
		console.log(gun.dmg + ' DV ' + gun.ap + ' AP');
	};

	self.rollBurstFire = function(npc, gun) {
		self.resetRecoil(gun);
		gun.recoil(gun.recoil() - 3);
		gun.loadedAmmo(gun.loadedAmmo() - 3);
		generalOutput(gun.name + ' Burst Fire', roll(gun.dicePool() + npc.rangedAttackModifier()));
		console.log(gun.dmg + ' DV ' + gun.ap + ' AP');
	};

	self.rollFullAuto = function(npc, gun) {
		gun.recoil(gun.recoil() - 10);
		gun.loadedAmmo(gun.loadedAmmo() - 10);
		generalOutput(gun.name + ' Full-Auto', roll(gun.dicePool() + npc.rangedAttackModifier()));
		console.log(gun.dmg + ' DV ' + gun.ap + ' AP');
	};

	self.resetRecoil = function(gun) {
		gun.recoil(gun.recoilCompensation);
	};

	self.reload = function(gun) {
		gun.loadedAmmo(gun.ammo);
		self.resetRecoil(gun);
	};

	self.rollMeleeWeapon = function(npc, meleeWeapon) {
		generalOutput(meleeWeapon.name + ' Attack', roll(meleeWeapon.dicePool - npc.conditionModifier()));
		console.log(meleeWeapon.dmg + ' DV ' + meleeWeapon.ap + ' AP');		
	};

	self.toggleModifier = function(npc, modifier, event) {
		var $target = $(event.target);

		if ($target.is(".on")) {
			npc.removeCombatModifier(modifier);
		}
		else {
			npc.addCombatModifier(modifier);
		}
	}

	self.toggleDefenseModifier = function(npc, modifier, event) {
		var $target = $(event.target);

		if ($target.is(".on")) {
			npc.removeDefenseModifier(modifier);
		}
		else {
			npc.addDefenseModifier(modifier);
		}
	}
}

function roll(dice) {
	var dice = dice < 0 ? 0 : dice;
	console.log('Rolling ' + dice + ' dice');
	var hits = 0;
	var ones = 0;
	for (var i = 0; i < dice; i++) {
		var result = Math.floor((Math.random() * 6) + 1);
		if (result < 1 || result > 6) alert (result);
		if (result == 1) ones++;
		if (result >= 5) hits++;
	}
	if (ones > dice / 2) {
		return { glitch: true, hits: hits };
	}
	return { hits: hits };
}

// Activates knockout.js
$(function() {
	ko.applyBindings(new AppViewModel());
});
</script>
<style type="text/css">
.npc {
	float: left;
	border: 1px solid black;
	margin: 5px;
	padding: 5px;
}
.action-grp {
	margin: 5px 0;
	clear: both;
}
.npc .name {
	margin: 0 0 10px 0;
}
.modifier {
	padding:2px 5px;
	border:0;
	background-color: lightgray;
	width: 19%;
	margin-left: 3px;
	display: block;
	float: left;
	margin-top: 4px;
}
.on {
	background-color: green;
}
</style>
</head>

<body>
<div data-bind="foreach: npcs">
	<div class="npc">
		<h1 class="name" data-bind="text: name"></h1>
		<div class="action-grp">
			<button data-bind="text: 'Condition Monitor ' + undamagedBoxes(), event: {contextmenu:$root.raiseCondition}, click: $root.lowerCondition"></button>
		</div>
		<div class="action-grp">
			<button data-bind="text: 'Resist ' + resistance(), click: $root.rollResistance"></button>
			<button data-bind="text: resistance, event: {contextmenu:$root.lowerResistance}, click: $root.raiseResistance"></button>
			<button data-bind="text: 'Defense ' + defenseModifier()"></button>
			<button data-bind="text: 'Misc Mod ' + miscDefenseMod(), event: {contextmenu:$root.lowerDefense}, click: $root.raiseDefense"></button>
		</div>
		<div data-bind="foreach: $root.fireModes" class="action-grp">
			<a data-bind="text: $data.name, css: { on: false }, click: function(fireMode) { $root.rollDefense($parent, fireMode); }" class="modifier"></a>
		</div>
		<div data-bind="foreach: guns">
			<div class="action-grp">
				<span data-bind="text: name"></span> 
				<button data-bind="click: function(gun) { $root.rollSemiAuto($parent, gun); }, visible: modes.indexOf('SS') != -1">SS</button> 
				<button data-bind="click: function(gun) { $root.rollSemiAuto($parent, gun); }, visible: modes.indexOf('SA') != -1">SA</button> 
				<button data-bind="click: function(gun) { $root.rollSemiAutoBurst($parent, gun); }, visible: modes.indexOf('SA') != -1 && modes.indexOf('BF') == -1">SB</button>
				<button data-bind="click: function(gun) { $root.rollBurstFire($parent, gun); }, visible: modes.indexOf('BF') != -1">BF</button>
				<button data-bind="click: function(gun) { $root.rollFullAuto($parent, gun); }, visible: modes.indexOf('FA') != -1">FA</button>
				<button data-bind="text: $parent.recoilCompensation() + recoilCompensation + ' rc', click: $root.resetRecoil"></button>
				<button data-bind="text: ammo() + ' ammo', click: $root.reload"></button>
			</div>
		</div>
		<div data-bind="foreach: meleeWeapons">
			<div class="action-grp">
				<span data-bind="text: name"></span> 
				<button data-bind="click: function(meleeWeapon) { $root.rollMeleeWeapon($parent, meleeWeapon); }">Attack</button> 
			</div>
		</div>
		<div data-bind="foreach: $root.modifiers" class="action-grp">
			<a data-bind="text: $data.key, css: { on: false }" class="modifier"></a> 
		</div>
	</div>
</div>
</body>

</html>