<!DOCTYPE html>
<html>
<head>
<title>Title of the document</title>
<script src="https://code.jquery.com/jquery-2.1.3.min.js"></script>
<script src="scrollTo/jquery.scrollTo.min.js"></script>
<script src="alertify/js/alertify.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.3.0/knockout-min.js"></script>

<link href="alertify/css/core.css" rel="stylesheet" type="text/css"></link>
<link href="alertify/css/themes/default/default.css" rel="stylesheet" type="text/css"></link>

<script>
var Skill = {
	Pistols: "Pistols",
	Automatics: "Automatics",
	LongArms: "LongArms"
};

var FireModeEnum = function(name, bulletsUsed, defenseMod, causesProgressiveRecoil) {
	var self = this;
	self.name = name;
	self.bulletsUsed = bulletsUsed;
	self.defenseMod = defenseMod;
	self.causesProgressiveRecoil = causesProgressiveRecoil;
}

var FireMode = {
	SS: new FireModeEnum("SS", 1, 0, false),
	SA: new FireModeEnum("SA", 1, 0, false),
	SB: new FireModeEnum("SB", 3, -2, true),
	BF: new FireModeEnum("BF", 3, -2, false),
	FA: new FireModeEnum("FA", 10, -9, true),
	asArray: function() {
		var arr = [];
		for (var x in this) {
			if (typeof this[x] == "object") {
				arr.push(this[x]);
			}
		}
		return arr;
	}
}

var StatusEnum = function(key, attackMod, defenseMod) {
	var self = this;
	self.key = key;
	self.attackMod = attackMod;
	self.defenseMod = defenseMod;
};

var Status = {
	BlindFire: new StatusEnum("BlindFire", -6, 0),
	BlindFireWithImaging: new StatusEnum("BlindFireWithImaging", -3, 0),
	CalledShot: new StatusEnum("CalledShot", -4, 0),
	Charging: new StatusEnum("Charging", 2, 0),
	FriendsInMelee: new StatusEnum("FriendsInMelee", 1, 0),
	GoodCover: new StatusEnum("GoodCover", 0, 4),
	ImplantedSmartGun: new StatusEnum("ImplantedSmartGun", 2, 0),
	InMelee: new StatusEnum("InMelee", -3, -3),
	InMovingVehicle: new StatusEnum("InMovingVehicle", 0, 3),
	LaserSight: new StatusEnum("LaserSight", 1, 0),
	PartialCover: new StatusEnum("PartialCover", 0, 2),
	Prone: new StatusEnum("Prone", -1, -2),
	ReceivingCharge: new StatusEnum("ReceivingCharge", 0, 1),
	Running: new StatusEnum("Running", -2, 2),
	SmartGun: new StatusEnum("SmartGun", 1, 0),
	SuperiorPosition: new StatusEnum("SuperiorPosition", 2, 0),
	TouchOnly: new StatusEnum("TouchOnly", 2, 0),
	attackModifiers: function() {
		var arr = [];
		for (var x in this) {
			if (typeof this[x] == "object") {
				if (this[x].attackMod != 0) {
					arr.push(this[x]);
				}
			}
		}
		return arr;
	},
	defenseModifiers: function() {
		var arr = [];
		for (var x in this) {
			if (typeof this[x] == "object") {
				if (this[x].defenseMod != 0) {
					arr.push(this[x]);
				}
			}
		}
		return arr;
	},
};

function Initiative(reaction, intuition, bonusDice, dataProcessing, conditionModifier) {
	var self = this;
	self.modes = { 'AR': 1 + bonusDice, 'ColdSim VR': 3, 'HotSim VR': 4 };
	self.mode = ko.observable('AR');
	self.arModifier = reaction + intuition;
	self.vrModifier = dataProcessing + intuition;
	self.modifier = ko.computed(function() { return self.mode() == 'AR' ? self.arModifier : self.vrModifier; });
	self.otherModes = ko.computed(function() {
		var otherModes = [];
		for (var i in self.modes) {
			if (i != self.mode())
				otherModes.push(i);
		}
		return otherModes;
	});
	self.dice = ko.computed(function() {
		return Math.min(self.modes[self.mode()], 5);
	});
	self.rolledScore = ko.observable(0);
	self.score = ko.computed(function() { return self.rolledScore() + conditionModifier(); });
	self.label = ko.computed(function() { return self.score() + '(' + self.modifier() + '+' + self.dice() + 'd6)' });
	self.roll = function() {
		self.rolledScore(self.modifier() + rollSum(self.dice()));
	};
	self.changeScore = function(score) {
		self.rolledScore(self.rolledScore() + score);
	};
	self.changeMode = function(mode) {
		var diceDiff = self.modes[mode] - self.modes[self.mode()];
		if (diceDiff != 0) {
			var dice = Math.min(Math.abs(diceDiff), 5);

			var scoreChange = rollSum(dice);
			if (diceDiff < 0)
				scoreChange = -scoreChange;
			self.changeScore(scoreChange);
		}
		self.mode(mode);
	};
}

function AddPc(name, reaction, intuition, bonusInitiativeDice, dataProcessing, firewall) {
	return new Npc(name, 0, 0, reaction, 0, 0, 0, intuition, 0, 0, 0, 0, 0, {}, [], bonusInitiativeDice, dataProcessing, firewall);
}

function Npc(name, body, agility, reaction, strength, willpower, logic, intuition, charisma, edge, magic, essence, armor, skills, guns, bonusInitiativeDice, dataProcessing, firewall) {
	var self = this;
	self.name = name;
	self.body = ko.observable(body);
	self.agility = ko.observable(agility);
	self.reaction = ko.observable(reaction);
	self.strength = ko.observable(strength);
	self.willpower = ko.observable(willpower);
	self.logic = ko.observable(logic);
	self.intuition = ko.observable(intuition);
	self.charisma = ko.observable(charisma);
	self.edge = ko.observable(edge);
	self.magic = ko.observable(magic);
	self.essence = ko.observable(essence);
	self.dataProcessing = ko.observable(dataProcessing);
	self.firewall = ko.observable(firewall);
	self.armor = armor;
	self.recoilCompensation = ko.computed(function() { return Math.ceil(self.strength() / 3) + 1; });
	self.meleeWeapons = ko.observableArray([]);
	self.skills = skills;
	self.statuses = ko.observableArray([]);
	self.isActive = ko.observable(false);
	self.hasActed = ko.observable(false);
	self.isPC = false;
	self.edging = ko.observable(false);
	self.edgePoints = ko.observable(self.edge());
	self.edgeModifier = ko.computed(function() {
		return self.edgePoints() > 0 && self.edging() ? self.edge() : 0;
	});
	self.useEdge = function() {
		if (!self.edging() || self.edgePoints() == 0) return 0;
		self.edgePoints(self.edgePoints() - 1);
		if (self.edgePoints() == 0) self.edging(false);
		return self.edge();
	};

	var sumModifiers = function(prop) {
		var sum = 0;
		for (var i = 0; i < self.statuses().length; i++) {
			for (var x = 0; x < arguments.length; x++) {
				if (self.statuses()[i] == arguments[x]) {
					sum += self.statuses()[i][prop];
				}
			}
		}
		return sum;
	};

	var ConditionTrack = function(attribute) {
		var self2 = this;
		self2.damage = ko.observable(0);
		self2.monitor = ko.computed(function() { return Math.ceil(attribute / 2) + 8; });
		self2.current = ko.computed(function() { return self2.monitor() - self2.damage(); });
		self2.takeDamage = function() { if (self2.damage() < self2.monitor()) self2.damage(self2.damage() + 1); };
		self2.healDamage = function() { if (self2.damage() > 0) self2.damage(self2.damage() - 1); };
		self2.label = ko.computed(function() {
			return 'Condition Monitor ' + self2.current() + '(' + self2.monitor() + ')';
		});
	};

	self.physicalTrack = new ConditionTrack(self.body());
	self.useStun = ko.observable(false);
	self.stunTrack = new ConditionTrack(self.willpower());

	self.conditionModifier = ko.computed(function() {
		var fromDamage = Math.floor(self.physicalTrack.damage() / 3);
		var fromStun = Math.floor(self.stunTrack.damage() / 3);
		if (!self.useStun()) fromStun = 0;
		return -(fromDamage + fromStun);
	});

	self.initiative = ko.computed(function() {
		return new Initiative(self.reaction(), self.intuition(), bonusInitiativeDice, self.dataProcessing(), self.conditionModifier);
	});

	self.miscDefenseMod = ko.observable(0);
	self.lowerDefense = function() { self.miscDefenseMod(self.miscDefenseMod() - 1); };
	self.raiseDefense = function() { self.miscDefenseMod(self.miscDefenseMod() + 1); };
	self.previouslyDefendedAttacks = ko.observable(0);
	self.defense = ko.computed(function() { 
		return self.reaction() + self.intuition() + self.edgeModifier() + self.miscDefenseMod() + self.conditionModifier() - self.previouslyDefendedAttacks(); 
	});
	self.startTurn = function() {
		self.isActive(true);
		self.previouslyDefendedAttacks(0);
	};
	self.endTurn = function() {
		self.isActive(false);
		self.hasActed(true);
	};
	self.gunDefense = ko.computed(function() {
		return self.defense() + 
			sumModifiers("defenseMod",
				Status.InMovingVehicle,
				Status.Prone,
				Status.Running,
				Status.GoodCover,
				Status.PartialCover,
				Status.InMelee);
	});
	self.meleeDefense = ko.computed(function() {
		return self.defense() + 
			sumModifiers("defenseMod",
				Status.InMovingVehicle,
				Status.ReceivingCharge,
				Status.GoodCover,
				Status.PartialCover);
	});

	var DefenseFireMode = function(mode) {
		var self2 = this;
		self2.mode = mode;
		self2.modifier = ko.computed(function() {
			return self.gunDefense() + self2.mode.defenseMod;
		});
		self2.label = ko.computed(function() {
			return self2.mode.name + ' ' + self2.modifier() + '(' + self2.mode.defenseMod + ')';
		});
	};
	self.defenseFireModes = ko.observableArray([]);
	var fireModes = FireMode.asArray();
	for (var i in fireModes) {
		self.defenseFireModes.push(new DefenseFireMode(fireModes[i]));
	}

	self.resistanceMiscModifier = ko.observable(0);
	self.resistance = ko.computed(function() { return self.armor + self.body() + self.resistanceMiscModifier(); });
	self.lowerResistance = function() { self.resistanceMiscModifier(self.resistanceMiscModifier() - 1); };
	self.raiseResistance = function() { self.resistanceMiscModifier(self.resistanceMiscModifier() + 1); };

	self.progressiveRecoil = ko.observable(0);
	self.resetRecoil = function() {
		self.progressiveRecoil(0);
	};

	self.statusModifier = function(status, modifier) {
		for (var i = 0; i < self.statuses().length; i++) {
			if (self.statuses()[i] == status)
				return modifier ? modifier : status.value;
		}
	};

	self.rangedAttackStatusModifier = ko.computed(function() {
		return sumModifiers("attackMod",
			Status.BlindFire,
			Status.BlindFireWithImaging,
			Status.InMelee,
			Status.Running,
			Status.CalledShot,
			Status.SmartGun,
			Status.ImplantedSmartGun,
			Status.LaserSight);
	});

	self.meleeAttackModifiers = ko.computed(function() {
		return sumModifiers("attackMod",
			Status.Charging,
			Status.Prone,
			Status.CalledShot,
			Status.SuperiorPosition,
			Status.FriendsInMelee,
			Status.TouchOnly);
	});

	self.toggleDefenseModifier = function(modifier) {
		if (self.statuses.indexOf(modifier) != -1) {
			self.statuses.remove(modifier);
			return false;
		}
		self.statuses.push(modifier);
		return true;
	};

	self.shoot = function(gun, fireMode) {
		var dicePool = fireMode.modifier();
		if (fireMode.mode.causesProgressiveRecoil) {
			self.progressiveRecoil(self.progressiveRecoil() + fireMode.mode.bulletsUsed);
		}

		gun.usedAmmo(gun.usedAmmo() + fireMode.mode.bulletsUsed);

		return dicePool;
	};

	self.melee = function(weapon) {
		var dicePool = self.agility() + 
			self.skills[weapon.linkedSkill] + 
			self.conditionModifier() + 
			self.meleeAttackModifiers();

	};

	self.gunDefend = function(fireMode) {
		var dicePool = fireMode.modifier();
		self.previouslyDefendedAttacks(self.previouslyDefendedAttacks() + 1);
		return dicePool;
	};

	self.meleeDefend = function() {
		var dicePool = self.meleeDefense();
		self.previouslyDefendedAttacks(self.previouslyDefendedAttacks() + 1);
		return dicePool;
	};

	self.addGun = function(gun) {
		self.guns.push(gun);
		gun.setNpc(self);
	};

	self.guns = ko.observableArray([]);
	self.addGun = function(gun) {
		self.guns.push(gun);
		gun.setNpc(self);
	};
	for (var i in guns) {
		self.addGun(guns[i]);
	}

	self.clone = function() {
		var guns = [];
		for (var i in self.guns()) {
			guns.push(self.guns()[i].clone());
		}
		return new Npc(name, body, agility, reaction, strength, willpower, logic, intuition, charisma, edge, magic, essence, armor, skills, guns, 
			bonusInitiativeDice, dataProcessing, firewall);
	};

	self.cloneMany = function(count) {
		var npcs = [];
		for (var i = 1; i <= count; i++) {
			var npc = self.clone();
			npc.name = npc.name.replace(/\{0\}/, i);
			npcs.push(npc);
		}
		return npcs;
	};
}

function Gun(name, accuracy, damage, damageType, armorPenetration, fireModes, recoilCompensation, maxAmmo, linkedSkill) {
	var self = this;
	self.name = name;
	self.accuracy = accuracy;
	self.damage = damage;
	self.damageType = damageType;
	self.armorPenetration = armorPenetration;
	self.recoilCompensation = recoilCompensation;
	self.maxAmmo = maxAmmo;
	self.usedAmmo = ko.observable(0);
	self.ammo = ko.computed(function() { return self.maxAmmo - self.usedAmmo(); });
	self.reload = function() {
		self.usedAmmo(0);
	};
	self.deviceRating = 2;
	self.linkedSkill = linkedSkill;
	self.miscModifier = ko.observable(0);

	self.clone = function() {
		return new Gun(name, accuracy, damage, damageType, armorPenetration, fireModes, recoilCompensation, maxAmmo, linkedSkill);
	};

	self.raiseMiscModifier = function() { self.miscModifier(self.miscModifier() + 1); };
	self.lowerMiscModifier = function() { self.miscModifier(self.miscModifier() - 1); };

	self.setNpc = function(npc) {
		self.modifier = ko.computed(function() {
			return npc.agility() + 
				npc.skills[self.linkedSkill] + 
				npc.conditionModifier() + 
				npc.rangedAttackStatusModifier() +
				npc.edgeModifier() +
				self.miscModifier();
		});

		self.totalRecoilCompensation = ko.computed(function() { return npc.recoilCompensation() + self.recoilCompensation; });
		self.progressiveRecoil = ko.computed(function() { return self.totalRecoilCompensation() - npc.progressiveRecoil(); });
		self.recoilLabel = ko.computed(function() { return self.progressiveRecoil() + ' ' + (self.progressiveRecoil() >= 0 ? 'rc' : 'pr'); });

		var GunFireMode = function(mode) {
			var self2 = this;
			self2.mode = mode;
			self2.modifier = ko.computed(function() {
				var recoilCompensation = self2.mode.causesProgressiveRecoil ? self.progressiveRecoil() : self.totalRecoilCompensation();
				var progressiveRecoil = recoilCompensation - self2.mode.bulletsUsed;
				if (progressiveRecoil >= 0) return self.modifier();
				return self.modifier() + progressiveRecoil;
			});
			self2.label = ko.computed(function() {
				return mode.name + ' ' + self2.modifier() + '(-' + mode.bulletsUsed + ')'
			});
		};
		self.fireModes = ko.observableArray([]);
		for (var i in fireModes) {
			self.fireModes.push(new GunFireMode(fireModes[i]));
		}
	};
}

//function Gun(name, accuracy, damage, damageType, armorPenetration, fireModes, recoilCompensation, maxAmmo, linkedSkill) {
var Guns = {
	AresPredatorV: function () { return new Gun('Ares Predator V', 5, 8, 'P', -1, [FireMode.SA,FireMode.SB], 0, 15, Skill.Pistols); },
	BrowningUltraPower: function () { return new Gun('Browning Ultra-Power', 6, 8, 'P', -1, [FireMode.SA,FireMode.SB], 0, 10, Skill.Pistols); },
	RugerSuperWarhawk: function () { return new Gun('Ruger Super Warhawk', 5, 9, 'P', -2, [FireMode.SS], 0, 6, Skill.Pistols); },
	ColtGovernment2066: function () { return new Gun('Colt Government 2066', 6, 7, 'P', -1, [FireMode.SA,FireMode.SB], 0, 14, Skill.Pistols); },
	ColtCobraTZ120: function () { return new Gun('Colt Cobra TZ-120', 5, 7, 'P', 0, [FireMode.SA,FireMode.BF,FireMode.FA], 3, 32, Skill.Automatics); },
	AK97: function () { return new Gun('AK-97', 5, 10, 'P', -2, [FireMode.SA,FireMode.BF,FireMode.FA], 0, 38, Skill.Automatics); },
	Bow: function (rating) { return new Gun('Bow ' + rating, 6, rating + 2, 'P', -Math.ceil(rating / 4), [FireMode.SS], 0, 99, Skill.Automatics); },
	DefianceT250: function () { return new Gun('Defiance T-250', 4, 10, 'P', -1, [FireMode.SS,FireMode.SA,FireMode.SB], 0, 5, Skill.LongArms); },
};

var log = function(success, msg) {
	if (success !== true && success !== false) {
		msg = success;
		success = true;
	}

	if (success) alertify.success(msg);
	else alertify.error(msg);

	console.log(msg.replace("<br/>", "\r\n"));
};

function AppViewModel() {
	var self = this;

//function Npc(name, body, agility, reaction, strength, willpower, logic, intuition, charisma, edge, magic, essence, armor, skills, guns) {
//function Gun(name, accuracy, damage, damageType, armorPenetration, fireModes, recoilCompensation, maxAmmo, linkedSkill) {

	var skillSet = {};
	skillSet[Skill.Pistols] = 5;
	skillSet[Skill.Automatics] = 5;
	var shooters = new Npc('Shooters Ganger {0}', 4, 5, 5, 3, 3, 3, 3, 5, 3, 0, 5, 8, skillSet, 
		[Guns.BrowningUltraPower(), Guns.ColtCobraTZ120()], 0, 2, 2).cloneMany(11);

	var skillSet = {};
	skillSet[Skill.Pistols] = 6;
	var shootersLeader = new Npc('"Enyo" Leader', 5, 9, 7, 3, 4, 4, 4, 8, 3, 0, 2.73, 8, skillSet, 
		[Guns.BrowningUltraPower()], 0, 3, 3);

	var skillSet = {};
	skillSet[Skill.Pistols] = 5;
	skillSet[Skill.Automatics] = 5;
	var spans = new Npc('Span Ganger {0}a', 6, 5, 4, 6, 3, 2, 3, 3, 3, 0, 5, 9, skillSet, 
		[Guns.ColtGovernment2066()], 0, 2, 2).cloneMany(4);
	spans = spans.concat(new Npc('Span Ganger {0}b', 6, 5, 4, 6, 3, 2, 3, 3, 3, 0, 5, 9, skillSet, 
		[Guns.AK97()], 0, 2, 2).cloneMany(4));

	var skillSet = {};
	skillSet[Skill.Pistols] = 6;
	var spansLeader = new Npc('"The Duke" Leader', 7, 8, 6, 9, 4, 3, 3, 4, 3, 0, 0.8, 15, skillSet, 
		[Guns.RugerSuperWarhawk()], 2, 5, 5);

	var skillSet = {};
	skillSet[Skill.Pistols] = 4;
	skillSet[Skill.Automatics] = 6;
	var dogSoldiers = new Npc('Dog Soldiers {0}', 4, 6, 4, 7, 3, 3, 3, 3, 3, 0, 5, 9, skillSet, 
		[Guns.ColtGovernment2066(), Guns.Bow(7)], 0, 2, 2).cloneMany(11);

	var dogSoldiersLeader = new Npc('"Red Feather" Leader', 5, 6, 8, 5, 4, 4, 4, 4, 3, 6, 6, 11, {}, [], 4, 3, 3);

	var skillSet = {};
	skillSet[Skill.Pistols] = 5;
	skillSet[Skill.LongArms] = 5;
	var gimliSons = new Npc('Gimli Sons {0}', 6, 5, 4, 7, 3, 3, 3, 3, 3, 0, 5, 9, skillSet, 
		[Guns.ColtGovernment2066(), Guns.DefianceT250()], 0, 2, 2).cloneMany(9);

	var skillSet = {};
	skillSet[Skill.Pistols] = 6;
	var gimliSonsLeader = new Npc('"Stump" Leader', 6, 5, 5, 7, 6, 4, 5, 4, 3, 6, 6, 9, skillSet, 
		[Guns.ColtGovernment2066()], 1, 4, 4);

	var npcs = [];
	if (location.href.indexOf('shooters') != -1) npcs = shooters.concat([shootersLeader]);
	else if (location.href.indexOf('spans') != -1) npcs = spans.concat([spansLeader]);
	else if (location.href.indexOf('dogsoldiers') != -1) npcs = dogSoldiers.concat([dogSoldiersLeader]);
	else if (location.href.indexOf('gimlisons') != -1) npcs = gimliSons.concat([gimliSonsLeader]);

	var skillSet = {};
	skillSet[Skill.Pistols] = 3;
	var pcs = [
		AddPc('Ben', 3, 6, 0, 5, 6),
		AddPc('Adam', 7, 4, 2, 3, 3),
		AddPc('Bill', 4, 3, 0, 3, 3),
		AddPc('Jim', 3, 4, 0, 6, 6),
		AddPc('Aaron', 7, 5, 0, 3, 3)
	];
	for (var i in pcs) { pcs[i].isPC = true; }

	self.npcs = ko.observableArray(npcs.concat(pcs));
	// self.npcs = ko.observableArray(pcs);

	self.attackModifiers = Status.attackModifiers();
	self.defenseModifiers = Status.defenseModifiers();
	self.fireModes = FireMode.asArray();

	var generalOutput = function(desc, diceResult) {
		var msg = desc + '.';
		if (diceResult.glitch) {
			msg += 'Glitch.';
		}
		msg += '<br/>';
		if (diceResult.explodeDice > 0) {
			msg += diceResult.explodeDice + ' exploded.<br/>';
		}
		msg += diceResult.dice + ' dice / ' + diceResult.hits + ' hits';
		log(!diceResult.glitch,msg);
	};

	var sortByInitiative = function(a, b) {
		if (a.initiative().score() > b.initiative().score()) return -1;
		if (a.initiative().score() < b.initiative().score()) return 1;
		return 0;
	};

	self.startCombatTurn = function() {
		log("Starting new combat turn");
		for (var i in self.npcs()) {
			self.npcs()[i].initiative().roll();
			self.npcs()[i].hasActed(false);
			self.npcs()[i].isActive(false);
		}
		self.npcs.sort(sortByInitiative);
		self.npcs()[0].startTurn();
		$.scrollTo('.character:eq(0)', 300);
	};
	self.startCombatTurn();

	self.startNextInitiativePass = function() {
		log("Starting new initiative pass");
		for (var i in self.npcs()) {
			self.npcs()[i].initiative().changeScore(-10);
			if (self.npcs()[i].initiative().score() > 0) {
				self.npcs()[i].hasActed(false);
			}
		}
		self.npcs()[0].startTurn();
		$.scrollTo('.character:eq(0)', 300);
	};

	self.endTurn = function() {
		for (var i = 0; i < self.npcs().length; i++) {
			if (self.npcs()[i].isActive()) {
				self.npcs()[i].endTurn();
			}
		}
		self.npcs.sort(sortByInitiative);

		var anyCanActThisPass = false;
		var anyCanActNextPass = false;
		for (var i = 0; i < self.npcs().length; i++) {
			var npc = self.npcs()[i];
			if (!npc.hasActed() && npc.initiative().score() > 0) {
				anyCanActThisPass = true;
				npc.startTurn();
				$.scrollTo('.character:eq(' + i +')', 300);
				break;
			}
			if (npc.initiative().score() > 10) {
				anyCanActNextPass = true;
			}
		}

		if (!anyCanActThisPass) {
			if (anyCanActNextPass) {
				self.startNextInitiativePass();
			}
			else {
				self.startCombatTurn();
			}
		}
	}

	self.rollGunDefense = function(npc, fireMode) {
		var dicePool = npc.gunDefend(fireMode);
		generalOutput('Defense', roll(dicePool, npc.useEdge()));
	};

	self.rollMeleeDefense = function(npc) {
		var dicePool = npc.meleeDefend();
		generalOutput('Defense', roll(dicePool, npc.useEdge()));
	};

	self.rollResistance = function(npc) {
		generalOutput('Resistance', roll(npc.resistance(), npc.useEdge()));
	};

	self.shoot = function(npc, gun, mode) {
		var diceResults = roll(npc.shoot(gun, mode), npc.useEdge());
		generalOutput(gun.name + ' ' + mode.mode.name, diceResults);
	};

	self.rollMeleeWeapon = function(npc, meleeWeapon) {
		generalOutput(meleeWeapon.name + ' Attack', roll(meleeWeapon.dicePool - npc.conditionModifier(), npc.useEdge()));
		log(meleeWeapon.dmg + ' DV ' + meleeWeapon.ap + ' AP');		
	};

	self.toggleDefenseModifier = function(npc, modifier, event) {
		var $target = $(event.target);

		if (npc.toggleDefenseModifier(modifier)) {
			$target.addClass('on');
		}
		else {
			$target.removeClass('on');
		}
	}
}

function rollSum(dice) {
	var sum = 0;
	for (var i = 0; i < dice; i++) {
		sum += Math.floor((Math.random() * 6) + 1);
	}
	return sum;
}

function roll(dice, explode) {
	var dice = dice < 0 ? 0 : dice;
	var hits = 0;
	var ones = 0;
	var explodeDice = 0;
	for (var i = 0; i < dice + explodeDice; i++) {
		var result = Math.floor((Math.random() * 6) + 1);
		if (result < 1 || result > 6) alert ('Dice roll was out of range. ' + result);
		if (result == 1) ones++;
		if (result >= 5) hits++;
		if (result == 6 && explode) explodeDice++;
	}
	var rollResult = { dice: dice, explodeDice: explodeDice, hits: hits };
	if (ones > (dice + explodeDice) / 2) {
		rollResult.glitch = true;
		return rollResult;
	}
	return rollResult;
}

// Activates knockout.js
$(function() {
	window.m = new AppViewModel();
	ko.applyBindings(window.m);
});
</script>
<style type="text/css">
.character {
	float: left;
	border: 1px solid black;
	margin: 5px;
	padding: 5px;
	position: relative;
	width: 700px;

}
.npc {
}
.pc {

}
.action-grp {
	margin: 5px 0;
	clear: both;
}
.character .name {
	margin: 0 0 10px 0;
	font-size: 18px;
}
.modifier {
	padding: 3px 5px;
	border: 0;
	background-color: lightgray;
	width: 24%;
	margin-right: 1%;
	display: block;
	float: left;
	margin-top: 4px;
}
.on {
	font-weight: bold;
}
br {
	clear: both;
}
button.fixed-wide {
	width: 75px;
}
.end-turn {
	position: absolute;
	right: 10px;
	top: 10px;
}
.active {
	background-color: #F0FFF0;
}
.statline {
	margin: 0;
	padding: 0;
	list-style: none;
	clear: both;
}
.statline li {
	float: left;
	width: 30px;
	text-align:center;
}
.statline.title li {
	background-color: #ccc;
	border-bottom: 2px solid #000;
}
body {
	font-family: verdana;
	font-size: 16px;
}
button {
	font-family: verdana;
	font-size: 11px;
}
</style>
</head>

<body>
<div>
	<button data-bind="click: startCombatTurn">New Combat Turn</button>
</div>
<div data-bind="foreach: npcs">
	<div class="character" data-bind="css: { active: isActive, npc: !isPC, pc: isPC }">
		<h1 class="name"><span data-bind="text: name"></span>, <span data-bind="text: initiative().label()"></span></h1>
		<ul class="statline title" data-bind="visible: !isPC">
			<li>B</li><li>A</li><li>R</li><li>S</li><li>W</li><li>L</li><li>I</li><li>C</li><li>Ess</li><li>E</li><li>M</li>
		</ul>
		<ul class="statline" data-bind="visible: !isPC">
			<li data-bind="text: body"></li>
			<li data-bind="text: agility"></li>
			<li data-bind="text: reaction"></li>
			<li data-bind="text: strength"></li>
			<li data-bind="text: willpower"></li>
			<li data-bind="text: logic"></li>
			<li data-bind="text: intuition"></li>
			<li data-bind="text: charisma"></li>
			<li data-bind="text: essence"></li>
			<li data-bind="text: edge"></li>
			<li data-bind="text: magic"></li>
		</ul>
		<div class="end-turn">
			<span data-bind="foreach: initiative().otherModes">
				<button data-bind="text: $data, click: $parent.initiative().changeMode"></button>
			</span>
			<button data-bind="click: function() { initiative().changeScore(-5); }">-5</button>
			<button data-bind="click: function() { initiative().changeScore(-10); }">-10</button>
			<button data-bind="click: $root.endTurn">End Turn</button>
		</div>
<!-- condition -->
		<div class="action-grp">
			<button data-bind="text: physicalTrack.label(), event: {contextmenu: physicalTrack.healDamage}, click: physicalTrack.takeDamage"></button>
			<button data-bind="visible: useStun, text: stunTrack.label(), event: {contextmenu: stunTrack.healDamage}, click: stunTrack.takeDamage"></button>
			<label><input type="checkbox" data-bind="checked: useStun" />Stun</label>
			<label data-bind="visible: edgePoints() > 0"><input type="checkbox" data-bind="checked: edging" />Edging(<span data-bind="text: edgePoints"></span>)</label>
		</div>
		<div data-bind="visible: !isPC">
<!-- defense -->
			<div class="action-grp">
				<button data-bind="text: 'Defense ' + defense() + '(' + miscDefenseMod() + ')', event: {contextmenu: lowerDefense}, click: raiseDefense"></button>
				<span data-bind="foreach: defenseFireModes" class="action-grp">
					<button class="fixed-wide" data-bind="text: label, click: function() { $root.rollGunDefense($parent, $data); }"></button>
				</span>
				<button data-bind="text: 'Melee ' + meleeDefense(), click: $root.rollMeleeDefense"></button>
			</div>
<!-- defense mods -->
			<div data-bind="foreach: $root.defenseModifiers" class="action-grp">
				<button data-bind="text: $data.key + ' ' + $data.defenseMod, css: { on: false }, click: function(data, evt) { return $root.toggleDefenseModifier($parent, data, evt); }" class="modifier"></button>
			</div>
			<br />
<!-- resistance -->
			<div class="action-grp">
				<button data-bind="text: 'Physical Resistance ' + resistance() + '(' + resistanceMiscModifier() + ')', 
					event: {contextmenu: lowerResistance}, click: raiseResistance"></button>
				<button data-bind="text: 'Resist Physical', click: $root.rollResistance"></button>
<!--
				<button data-bind="text: 'Resist Magical ' + resistance() + '(' + resistanceMiscModifier() + ')', 
					event: {contextmenu: lowerResistance}, click: raiseResistance"></button>
				<button data-bind="text: 'Resist Magical'"></button>
-->
			</div>
<!-- guns -->
			<div class="action-grp" data-bind="foreach: guns">
				<div class="action-grp">
					<button data-bind="text: name + ' ' + modifier() + '(' + miscModifier() + ')', click: raiseMiscModifier, event: { contextmenu: lowerMiscModifier }"></button>
					<span data-bind="foreach: fireModes">
						<button class="fixed-wide" data-bind="text: label, click: function() { $root.shoot($parents[1], $parent, $data); }"></button> 
					</span>
					<button data-bind="text: recoilLabel, click: $parent.resetRecoil"></button>
					<button data-bind="text: ammo() + ' ammo', click: reload"></button>
				</div>
			</div>
<!-- melee -->
			<div data-bind="foreach: meleeWeapons">
				<div class="action-grp">
					<span data-bind="text: name"></span> 
					<button data-bind="click: function(meleeWeapon) { $root.rollMeleeWeapon($parent, meleeWeapon); }">Attack</button> 
				</div>
			</div>
<!-- attack mods -->
			<div data-bind="foreach: $root.attackModifiers" class="action-grp">
				<button data-bind="text: $data.key + ' ' + $data.attackMod, css: { on: false }, click: function(data, evt) { return $root.toggleDefenseModifier($parent, data, evt); }" class="modifier"></button> 
			</div>
		</div>
	</div>
</div>
</body>

</html>