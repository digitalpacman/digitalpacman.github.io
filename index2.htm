<!DOCTYPE html>
<html>
<head>
<title>Title of the document</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.3.0/knockout-min.js"></script>
<script src="https://code.jquery.com/jquery-2.1.3.min.js"></script>
<script>
var Skill = {
	Pistols: "Pistols"
};

var FireModeEnum = function(name, bulletsUsed, defenseMod, causesProgressiveRecoil) {
	var self = this;
	self.name = name;
	self.bulletsUsed = bulletsUsed;
	self.defenseMod = defenseMod;
	self.causesProgressiveRecoil = causesProgressiveRecoil;
}

var FireMode = {
	SS: new FireModeEnum("SS", 1, 0, false),
	SA: new FireModeEnum("SA", 1, 0, false),
	SB: new FireModeEnum("SB", 3, -2, true),
	BF: new FireModeEnum("BF", 3, -2, false),
	FA: new FireModeEnum("FA", 10, -9, true),
	asArray: function() {
		var arr = [];
		for (var x in this) {
			if (typeof this[x] == "object") {
				arr.push(this[x]);
			}
		}
		return arr;
	}
}

var StatusEnum = function(key, attackMod, defenseMod) {
	var self = this;
	self.key = key;
	self.attackMod = attackMod;
	self.defenseMod = defenseMod;
};

var Status = {
	BlindFire: new StatusEnum("BlindFire", -6, 0),
	BlindFireWithImaging: new StatusEnum("BlindFireWithImaging", -3, 0),
	CalledShot: new StatusEnum("CalledShot", -4, 0),
	Charging: new StatusEnum("Charging", 2, 0),
	FriendsInMelee: new StatusEnum("FriendsInMelee", 1, 0),
	GoodCover: new StatusEnum("GoodCover", 0, 4),
	ImplantedSmartGun: new StatusEnum("ImplantedSmartGun", 2, 0),
	InMelee: new StatusEnum("InMelee", -3, -3),
	InMovingVehicle: new StatusEnum("InMovingVehicle", 0, 3),
	PartialCover: new StatusEnum("PartialCover", 0, 2),
	Prone: new StatusEnum("Prone", -1, -2),
	ReceivingCharge: new StatusEnum("ReceivingCharge", 0, 1),
	Running: new StatusEnum("Running", -2, 2),
	SmartGun: new StatusEnum("SmartGun", 1, 0),
	SuperiorPosition: new StatusEnum("SuperiorPosition", 2, 0),
	TouchOnly: new StatusEnum("TouchOnly", 2, 0),
	attackModifiers: function() {
		var arr = [];
		for (var x in this) {
			if (typeof this[x] == "object") {
				if (this[x].attackMod != 0) {
					arr.push(this[x]);
				}
			}
		}
		return arr;
	},
	defenseModifiers: function() {
		var arr = [];
		for (var x in this) {
			if (typeof this[x] == "object") {
				if (this[x].defenseMod != 0) {
					arr.push(this[x]);
				}
			}
		}
		return arr;
	},
};

function Initiative(modifier, bonusDice) {
	var self = this;
	self.modifier = modifier;
	self.bonusDice = bonusDice;
	self.score = ko.observable(0);
	self.label = ko.computed(function() { return self.score() + '(' + self.modifier + '+' + self.bonusDice + 'd6)' });
	self.roll = function() {
		self.score(self.modifier + rollSum(self.bonusDice));
	};
	self.drop = function(score) {
		self.score(self.score() - score);
	};
}

function Npc(name, body, agility, reaction, strength, willpower, logic, intuition, charisma, edge, magic, essence, armor, skills, guns) {
	var self = this;
	self.name = name;
	self.body = 3;
	self.agility = 6;
	self.reaction = 3;
	self.strength = ko.observable(3);
	self.willpower = 3;
	self.logic = 3;
	self.intuition = 3;
	self.charisma = 3;
	self.edge = 3;
	self.magic = 0;
	self.essence = 6;
	self.armor = 0;
	self.recoilCompensation = ko.computed(function() { return Math.ceil(self.strength() / 3) + 1; });
	self.meleeWeapons = ko.observableArray([]);
	self.skills = {};
	self.skills[Skill.Pistols] = 6;
	self.statuses = ko.observableArray([]);
	self.initiative = ko.computed(function() { return new Initiative(self.reaction + self.intuition, 1); });
	self.isActive = ko.observable(false);

	var sumModifiers = function(prop) {
		var sum = 0;
		for (var i = 0; i < self.statuses().length; i++) {
			for (var x = 0; x < arguments.length; x++) {
				if (self.statuses()[i] == arguments[x]) {
					sum += self.statuses()[i][prop];
				}
			}
		}
		return sum;
	};

	self.damageBoxes = ko.observable(0);
	self.conditionMonitor = ko.computed(function() { return Math.ceil(self.body / 2) + 8; });
	self.undamagedBoxes = ko.computed(function() { return self.conditionMonitor() - self.damageBoxes(); });
	self.conditionModifier = ko.computed(function() { return -Math.floor(self.damageBoxes() / 3); });
	self.lowerCondition = function() { if (self.damageBoxes() < self.conditionMonitor()) self.damageBoxes(self.damageBoxes() + 1); };
	self.raiseCondition = function() { if (self.damageBoxes() > 0) self.damageBoxes(self.damageBoxes() - 1); };

	self.miscDefenseMod = ko.observable(0);
	self.lowerDefense = function() { self.miscDefenseMod(self.miscDefenseMod() - 1); };
	self.raiseDefense = function() { self.miscDefenseMod(self.miscDefenseMod() + 1); };
	self.previouslyDefendedAttacks = ko.observable(0);
	self.defense = ko.computed(function() { return self.reaction + self.intuition + self.miscDefenseMod() + self.conditionModifier() - self.previouslyDefendedAttacks(); });
	self.gunDefense = ko.computed(function() {
		return self.defense() + 
			sumModifiers("defenseMod",
				Status.InMovingVehicle,
				Status.Prone,
				Status.Running,
				Status.GoodCover,
				Status.PartialCover,
				Status.InMelee);
	});
	self.meleeDefense = ko.computed(function() {
		return self.defense() + 
			sumModifiers("defenseMod",
				Status.InMovingVehicle,
				Status.ReceivingCharge,
				Status.GoodCover,
				Status.PartialCover);
	});

	var DefenseFireMode = function(mode) {
		var self2 = this;
		self2.mode = mode;
		self2.modifier = ko.computed(function() {
			return self.gunDefense() + self2.mode.defenseMod;
		});
		self2.label = ko.computed(function() {
			return self2.mode.name + ' ' + self2.modifier() + '(' + self2.mode.defenseMod + ')';
		});
	};
	self.defenseFireModes = ko.observableArray([]);
	var fireModes = FireMode.asArray();
	for (var i in fireModes) {
		self.defenseFireModes.push(new DefenseFireMode(fireModes[i]));
	}

	self.resistanceMiscModifier = ko.observable(0);
	self.resistance = ko.computed(function() { return self.armor + self.body + self.resistanceMiscModifier(); });
	self.lowerResistance = function() { self.resistanceMiscModifier(self.resistanceMiscModifier() - 1); };
	self.raiseResistance = function() { self.resistanceMiscModifier(self.resistanceMiscModifier() + 1); };

	self.progressiveRecoil = ko.observable(0);
	self.resetRecoil = function() {
		self.progressiveRecoil(0);
	};

	self.statusModifier = function(status, modifier) {
		for (var i = 0; i < self.statuses().length; i++) {
			if (self.statuses()[i] == status)
				return modifier ? modifier : status.value;
		}
	};

	self.rangedAttackStatusModifier = ko.computed(function() {
		return sumModifiers("attackMod",
			Status.BlindFire,
			Status.BlindFireWithImaging,
			Status.InMelee,
			Status.Running,
			Status.CalledShot,
			Status.SmartGun,
			Status.ImplantedSmartGun);
	});

	self.meleeAttackModifiers = ko.computed(function() {
		return sumModifiers("attackMod",
			Status.Charging,
			Status.Prone,
			Status.CalledShot,
			Status.SuperiorPosition,
			Status.FriendsInMelee,
			Status.TouchOnly);
	});

	self.toggleDefenseModifier = function(modifier) {
		if (self.statuses.indexOf(modifier) != -1) {
			self.statuses.remove(modifier);
			return false;
		}
		self.statuses.push(modifier);
		return true;
	};

	self.shoot = function(gun, fireMode) {
		var dicePool = fireMode.modifier();
		if (fireMode.mode.causesProgressiveRecoil) {
			self.progressiveRecoil(self.progressiveRecoil() + fireMode.mode.bulletsUsed);
		}

		gun.usedAmmo(gun.usedAmmo() + fireMode.mode.bulletsUsed);

		return dicePool;
	};

	self.melee = function(weapon) {
		var dicePool = self.agility + 
			self.skills[weapon.linkedSkill] + 
			self.conditionModifier() + 
			self.meleeAttackModifiers();

	};

	self.gunDefend = function(fireMode) {
		var dicePool = fireMode.modifier();
		self.previouslyDefendedAttacks(self.previouslyDefendedAttacks() + 1);
		return dicePool;
	};

	self.meleeDefend = function() {
		var dicePool = self.meleeDefense();
		self.previouslyDefendedAttacks(self.previouslyDefendedAttacks() + 1);
		return dicePool;
	};

	self.addGun = function(gun) {
		self.guns.push(gun);
		gun.setNpc(self);
	};

	self.guns = ko.observableArray([]);
	self.addGun = function(gun) {
		self.guns.push(gun);
		gun.setNpc(self);
	};
	for (var i in guns) {
		self.addGun(guns[i]);
	}

	self.clone = function() {
		var guns = [];
		for (var i in self.guns()) {
			guns.push(self.guns()[i].clone());
		}
		return new Npc(name, body, agility, reaction, strength, willpower, logic, intuition, charisma, edge, magic, essence, armor, skills, guns);
	};

	self.cloneMany = function(count) {
		var npcs = [];
		for (var i = 1; i <= count; i++) {
			npcs.push(self.clone());
		}
		return npcs;
	};
}

function Gun(name, accuracy, damage, damageType, armorPenetration, fireModes, recoilCompensation, maxAmmo, linkedSkill) {
	var self = this;
	self.name = name;
	self.accuracy = accuracy;
	self.damage = damage;
	self.damageType = damageType;
	self.armorPenetration = armorPenetration;
	self.recoilCompensation = recoilCompensation;
	self.maxAmmo = maxAmmo;
	self.usedAmmo = ko.observable(0);
	self.ammo = ko.computed(function() { return self.maxAmmo - self.usedAmmo(); });
	self.reload = function() {
		self.usedAmmo(0);
	};
	self.deviceRating = 2;
	self.linkedSkill = linkedSkill;
	self.miscModifier = ko.observable(0);

	self.clone = function() {
		return new Gun(name, accuracy, damage, damageType, armorPenetration, fireModes, recoilCompensation, maxAmmo, linkedSkill);
	};

	self.raiseMiscModifier = function() { self.miscModifier(self.miscModifier() + 1); };
	self.lowerMiscModifier = function() { self.miscModifier(self.miscModifier() - 1); };

	self.setNpc = function(npc) {
		self.modifier = ko.computed(function() {
			return npc.agility + 
				npc.skills[self.linkedSkill] + 
				npc.conditionModifier() + 
				npc.rangedAttackStatusModifier() +
				self.miscModifier();
		});

		self.totalRecoilCompensation = ko.computed(function() { return npc.recoilCompensation() + self.recoilCompensation; });
		self.progressiveRecoil = ko.computed(function() { return self.totalRecoilCompensation() - npc.progressiveRecoil(); });
		self.recoilLabel = ko.computed(function() { return self.progressiveRecoil() + ' ' + (self.progressiveRecoil() >= 0 ? 'rc' : 'pr'); });

		var GunFireMode = function(mode) {
			var self2 = this;
			self2.mode = mode;
			self2.modifier = ko.computed(function() {
				var recoilCompensation = self2.mode.causesProgressiveRecoil ? self.progressiveRecoil() : self.totalRecoilCompensation();
				var progressiveRecoil = recoilCompensation - self2.mode.bulletsUsed;
				if (progressiveRecoil >= 0) return self.modifier();
				return self.modifier() + progressiveRecoil;
			});
		};
		self.fireModes = ko.observableArray([]);
		for (var i in fireModes) {
			self.fireModes.push(new GunFireMode(fireModes[i]));
		}
	};
}

//function Gun(name, accuracy, damage, damageType, armorPenetration, fireModes, recoilCompensation, maxAmmo, linkedSkill) {
var Guns = {
	AresPredatorV: function () { return new Gun('Ares Predator V', 5, 8, 'P', -1, [FireMode.SA], 0, 15, Skill.Pistols); },
	RugerSuperWarhawk: function () { return new Gun('Ruger Super Warhawk', 5, 9, 'P', -2, [FireMode.SS], 0, 6, Skill.Pistols); }
};

function AppViewModel() {
	var self = this;

//function Npc(name, body, agility, reaction, strength, willpower, logic, intuition, charisma, edge, magic, essence, armor, skills, guns) {
//function Gun(name, accuracy, damage, damageType, armorPenetration, fireModes, recoilCompensation, maxAmmo, linkedSkill) {

	var skillSet = {};
	skillSet[Skill.Pistols] = 6;
	var ganger = new Npc('Elf Ganger', 3, 5, 4, 2, 4, 2, 4, 5, 2, 0, 6, 9, skillSet, [Guns.AresPredatorV(), Guns.RugerSuperWarhawk()]);
	var gangers = ganger.cloneMany(8);
	console.log(gangers)

	self.npcs = ko.observableArray(gangers);

	self.attackModifiers = Status.attackModifiers();
	self.defenseModifiers = Status.defenseModifiers();
	self.fireModes = FireMode.asArray();
	self.actingCharacter = 0;

	var generalOutput = function(desc, diceResult) {
		if (diceResult.glitch) {
			console.log(desc + '. Glitch. ' + diceResult.hits + ' hits');
		}
		else {
			console.log(desc + '. ' + diceResult.hits + ' hits');
		}
	};

	self.startCombatTurn = function() {
		console.log("Starting new combat turn");
		self.npcs()[self.actingCharacter].isActive(false);
		for (var i in self.npcs()) {
			self.npcs()[i].initiative().roll();
		}
		self.npcs.sort(function(a, b) {
			if (a.initiative().score() > b.initiative().score()) return -1;
			if (a.initiative().score() < b.initiative().score()) return 1;
			return 0;
		});
		self.actingCharacter = 0;
		self.npcs()[self.actingCharacter].isActive(true);
	};
	self.startCombatTurn();

	var endInitiativePass = function() {
		for (var i in self.npcs()) {
			var npcInitiative = self.npcs()[i].initiative();
			npcInitiative.score(npcInitiative.score() - 10);
		}
	};

	self.endTurn = function() {
		self.npcs()[self.actingCharacter].isActive(false);
		var next = -1;
		var i = self.actingCharacter + 1;
		for (var limiter = self.npcs().length; limiter > 0; limiter--, i++) {
			if (i >= self.npcs().length) {
				endInitiativePass();
				i = 0;
			}
			if (self.npcs()[i].initiative().score() > 0) {
				next = i;
				break;
			}
		}
		if (next == -1) {
			self.startCombatTurn();
		}
		else {
			self.actingCharacter = next;
			self.npcs()[self.actingCharacter].isActive(true);
		}
	}

	self.rollGunDefense = function(npc, fireMode) {
		var dicePool = npc.gunDefend(fireMode);
		generalOutput('Defense', roll(dicePool));
	};

	self.rollMeleeDefense = function(npc) {
		var dicePool = npc.meleeDefend();
		generalOutput('Defense', roll(dicePool));
	};

	self.rollResistance = function(npc) {
		generalOutput('Resistance', roll(npc.resistance()));
	};

	self.shoot = function(npc, gun, mode) {
		var diceResults = roll(npc.shoot(gun, mode));
		generalOutput(gun.name + ' ' + mode.mode.name, diceResults);
	};

	self.rollMeleeWeapon = function(npc, meleeWeapon) {
		generalOutput(meleeWeapon.name + ' Attack', roll(meleeWeapon.dicePool - npc.conditionModifier()));
		console.log(meleeWeapon.dmg + ' DV ' + meleeWeapon.ap + ' AP');		
	};

	self.toggleDefenseModifier = function(npc, modifier, event) {
		var $target = $(event.target);

		if (npc.toggleDefenseModifier(modifier)) {
			$target.addClass('on');
		}
		else {
			$target.removeClass('on');
		}
	}
}

function rollSum(dice) {
	var sum = 0;
	for (var i = 0; i < dice; i++) {
		sum += Math.floor((Math.random() * 6) + 1);
	}
	return sum;
}

function roll(dice) {
	var dice = dice < 0 ? 0 : dice;
	console.log('Rolling ' + dice + ' dice');
	var hits = 0;
	var ones = 0;
	for (var i = 0; i < dice; i++) {
		var result = Math.floor((Math.random() * 6) + 1);
		if (result < 1 || result > 6) alert (result);
		if (result == 1) ones++;
		if (result >= 5) hits++;
	}
	if (ones > dice / 2) {
		return { glitch: true, hits: hits };
	}
	return { hits: hits };
}

// Activates knockout.js
$(function() {
	ko.applyBindings(new AppViewModel());
});
</script>
<style type="text/css">
.npc {
	float: left;
	border: 1px solid black;
	margin: 5px;
	padding: 5px;
	position: relative;
	width: 700px;
}
.action-grp {
	margin: 5px 0;
	clear: both;
}
.npc .name {
	margin: 0 0 10px 0;
}
.modifier {
	padding:2px 5px;
	border:0;
	background-color: lightgray;
	width: 22%;
	margin-right: 1%;
	display: block;
	float: left;
	margin-top: 4px;
}
.on {
	font-weight: bold;
}
br {
	clear: both;
}
button.fixed-wide {
	width: 75px;
}
.end-turn {
	position: absolute;
	right: 10px;
	top: 10px;
}
.active {
	background-color: #F0FFF0;
}
</style>
</head>

<body>
<div>
	<button data-bind="click: startCombatTurn">New Combat Turn</button>
</div>
<div data-bind="foreach: npcs">
	<div class="npc" data-bind="css: { active: isActive }">
		<h1 class="name"><span data-bind="text: name"></span>, <span data-bind="text: initiative().label()"></span></h1>
		<div class="end-turn">
			<button data-bind="click: function() { initiative().drop(5); }">-5</button>
			<button data-bind="click: function() { initiative().drop(10); }">-10</button>
			<button data-bind="click: $root.endTurn">End Turn</button>
		</div>
		<div class="action-grp">
			<button data-bind="text: 'Condition Monitor ' + undamagedBoxes(), event: {contextmenu: raiseCondition}, click: lowerCondition"></button>
		</div>
<!-- defense -->
		<div class="action-grp">
			<button data-bind="text: 'Defense ' + defense() + '(' + miscDefenseMod() + ')', event: {contextmenu: lowerDefense}, click: raiseDefense"></button>
			<span data-bind="foreach: defenseFireModes" class="action-grp">
				<button class="fixed-wide" data-bind="text: label, click: function() { $root.rollGunDefense($parent, $data); }"></button>
			</span>
			<button data-bind="text: 'Melee ' + meleeDefense(), click: $root.rollMeleeDefense"></button>
		</div>
<!-- defense mods -->
		<div data-bind="foreach: $root.defenseModifiers" class="action-grp">
			<button data-bind="text: $data.key + ' ' + $data.defenseMod, css: { on: false }, click: function(data, evt) { return $root.toggleDefenseModifier($parent, data, evt); }" class="modifier"></button>
		</div>
		<br />
<!-- resistance -->
		<div class="action-grp">
			<button data-bind="text: 'Physical Resistance ' + resistance() + '(' + resistanceMiscModifier() + ')', 
				event: {contextmenu: lowerResistance}, click: raiseResistance"></button>
			<button data-bind="text: 'Resist Physical', click: $root.rollResistance"></button>
<!--
			<button data-bind="text: 'Resist Magical ' + resistance() + '(' + resistanceMiscModifier() + ')', 
				event: {contextmenu: lowerResistance}, click: raiseResistance"></button>
			<button data-bind="text: 'Resist Magical'"></button>
-->
		</div>
<!-- guns -->
		<div class="action-grp" data-bind="foreach: guns">
			<div class="action-grp">
				<button data-bind="text: name + ' ' + modifier() + '(' + miscModifier() + ')', click: raiseMiscModifier, event: { contextmenu: lowerMiscModifier }"></button>
				<span data-bind="foreach: fireModes">
					<button class="fixed-wide" data-bind="text: mode.name + ' ' + modifier(), click: function() { $root.shoot($parents[1], $parent, $data); }"></button> 
				</span>
				<button data-bind="text: recoilLabel, click: $parent.resetRecoil"></button>
				<button data-bind="text: ammo() + ' ammo', click: reload"></button>
			</div>
		</div>
<!-- melee -->
		<div data-bind="foreach: meleeWeapons">
			<div class="action-grp">
				<span data-bind="text: name"></span> 
				<button data-bind="click: function(meleeWeapon) { $root.rollMeleeWeapon($parent, meleeWeapon); }">Attack</button> 
			</div>
		</div>
<!-- attack mods -->
		<div data-bind="foreach: $root.attackModifiers" class="action-grp">
			<button data-bind="text: $data.key + ' ' + $data.attackMod, css: { on: false }, click: function(data, evt) { return $root.toggleDefenseModifier($parent, data, evt); }" class="modifier"></button> 
		</div>
	</div>
</div>
</body>

</html>